/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkamsl"] = self["webpackChunkamsl"] || []).push([["vendors-node_modules_tensorflow_tfjs-backend-webgl_dist_index_js"],{

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assertNotComplex\": () => /* binding */ assertNotComplex\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n        }\n    });\n}\n//# sourceMappingURL=cpu_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"simpleAbsImpl\": () => /* binding */ simpleAbsImpl,\n/* harmony export */   \"abs\": () => /* binding */ abs,\n/* harmony export */   \"absConfig\": () => /* binding */ absConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nconst abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'abs');\n    let resultValues = new Float32Array(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nconst absConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addImpl\": () => /* binding */ addImpl,\n/* harmony export */   \"addComplexImpl\": () => /* binding */ addComplexImpl,\n/* harmony export */   \"add\": () => /* binding */ add,\n/* harmony export */   \"addConfig\": () => /* binding */ addConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst addImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((a, b) => a + b));\nconst addComplexImpl = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.createComplexBinaryKernelImpl)(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nconst add = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add, addImpl, addComplexImpl);\nconst addConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bincountImpl\": () => /* binding */ bincountImpl,\n/* harmony export */   \"bincountReduceImpl\": () => /* binding */ bincountReduceImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(weightsShape);\n    const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nfunction bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cast\": () => /* binding */ cast,\n/* harmony export */   \"castConfig\": () => /* binding */ castConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_zeros_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/zeros_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js\");\n/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Real */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\nfunction cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x }, backend });\n        }\n        const zerosTensorInfo = (0,_utils_zeros_impl__WEBPACK_IMPORTED_MODULE_2__.zeros)(backend, x.shape, x.dtype);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_4__.real)({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        const values = backend.data.get(x.dataId).values;\n        const resultValues = Int32Array.from(values);\n        return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n    }\n    if (dtype === 'bool') {\n        // This is essentially the result of notEqual(x, 0). We avoid using\n        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n        // cast -> notEqual -> binary_utils.\n        const xVals = backend.data.get(x.dataId).values;\n        const zero = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toTypedArray([0], x.dtype);\n        const [resultData, resultShape] = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_5__.createSimpleBinaryKernelImpl)((a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n        return backend.makeTensorInfo(resultShape, 'bool', resultData);\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nconst castConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cast,\n    backendName: 'cpu',\n    kernelFunc: cast\n};\n//# sourceMappingURL=Cast.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ceilImpl\": () => /* binding */ ceilImpl,\n/* harmony export */   \"ceil\": () => /* binding */ ceil,\n/* harmony export */   \"ceilConfig\": () => /* binding */ ceilConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\");\n/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ceilImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((xi) => Math.ceil(xi));\nconst ceil = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil, ceilImpl);\nconst ceilConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"complex\": () => /* binding */ complex,\n/* harmony export */   \"complexConfig\": () => /* binding */ complexConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const realVals = backend.data.get(real.dataId).values;\n    const imagVals = backend.data.get(imag.dataId).values;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.data.get(complexInfo.dataId);\n    // The complex tensor owns the underlying real and imag tensorInfos, only the\n    // complex tensor tracks refCount, when complexData is disposed the\n    // underlying tensorData will be disposed.\n    complex.complexTensorInfos = {\n        real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n        imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n    };\n    return complexInfo;\n}\nconst complexConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Complex,\n    backendName: 'cpu',\n    kernelFunc: complex\n};\n//# sourceMappingURL=Complex.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"concatImpl\": () => /* binding */ concatImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"expImpl\": () => /* binding */ expImpl,\n/* harmony export */   \"exp\": () => /* binding */ exp,\n/* harmony export */   \"expConfig\": () => /* binding */ expConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\");\n/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst expImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((xi) => Math.exp(xi));\nconst exp = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp, expImpl);\nconst expConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"expm1Impl\": () => /* binding */ expm1Impl,\n/* harmony export */   \"expm1\": () => /* binding */ expm1,\n/* harmony export */   \"expm1Config\": () => /* binding */ expm1Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\");\n/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst expm1Impl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((xi) => Math.expm1(xi));\nconst expm1 = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1, expm1Impl);\nconst expm1Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"floorImpl\": () => /* binding */ floorImpl,\n/* harmony export */   \"floor\": () => /* binding */ floor,\n/* harmony export */   \"floorConfig\": () => /* binding */ floorConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\");\n/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst floorImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((xi) => Math.floor(xi));\nconst floor = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor, floorImpl);\nconst floorConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherV2Impl\": () => /* binding */ gatherV2Impl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"greaterImpl\": () => /* binding */ greaterImpl,\n/* harmony export */   \"greater\": () => /* binding */ greater,\n/* harmony export */   \"greaterConfig\": () => /* binding */ greaterConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst greaterImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => (a > b) ? 1 : 0);\nconst greater = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater, greaterImpl, null /* complexImpl */, 'bool');\nconst greaterConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"identity\": () => /* binding */ identity,\n/* harmony export */   \"identityConfig\": () => /* binding */ identityConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nconst identityConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Identity,\n    backendName: 'cpu',\n    kernelFunc: identity\n};\n//# sourceMappingURL=Identity.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lessImpl\": () => /* binding */ lessImpl,\n/* harmony export */   \"less\": () => /* binding */ less,\n/* harmony export */   \"lessConfig\": () => /* binding */ lessConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst lessImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => (a < b) ? 1 : 0);\nconst less = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less, lessImpl, null /* complexImpl */, 'bool');\nconst lessConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"linSpaceImpl\": () => /* binding */ linSpaceImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"logImpl\": () => /* binding */ logImpl,\n/* harmony export */   \"log\": () => /* binding */ log,\n/* harmony export */   \"logConfig\": () => /* binding */ logConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\");\n/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst logImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((xi) => Math.log(xi));\nconst log = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log, logImpl);\nconst logConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxImpl\": () => /* binding */ maxImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maximumImpl\": () => /* binding */ maximumImpl,\n/* harmony export */   \"maximum\": () => /* binding */ maximum,\n/* harmony export */   \"maximumConfig\": () => /* binding */ maximumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst maximumImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((aValue, bValue) => Math.max(aValue, bValue)));\nconst maximum = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum, maximumImpl);\nconst maximumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"minimumImpl\": () => /* binding */ minimumImpl,\n/* harmony export */   \"minimum\": () => /* binding */ minimum,\n/* harmony export */   \"minimumConfig\": () => /* binding */ minimumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst minimumImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((aValue, bValue) => Math.min(aValue, bValue)));\nconst minimum = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum, minimumImpl);\nconst minimumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"multiplyImpl\": () => /* binding */ multiplyImpl,\n/* harmony export */   \"multiplyComplexImpl\": () => /* binding */ multiplyComplexImpl,\n/* harmony export */   \"multiply\": () => /* binding */ multiply,\n/* harmony export */   \"multiplyConfig\": () => /* binding */ multiplyConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst multiplyImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((aValue, bValue) => aValue * bValue));\nconst multiplyComplexImpl = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.createComplexBinaryKernelImpl)(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nconst multiply = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply, multiplyImpl, multiplyComplexImpl);\nconst multiplyConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"negImpl\": () => /* binding */ negImpl,\n/* harmony export */   \"neg\": () => /* binding */ neg,\n/* harmony export */   \"negConfig\": () => /* binding */ negConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Multiply */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction negImpl(xVals, xShape, xDtype) {\n    const minusOne = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(-1, xDtype);\n    return (0,_Multiply__WEBPACK_IMPORTED_MODULE_1__.multiplyImpl)([], xShape, minusOne, xVals, xDtype);\n}\nfunction neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nconst negConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"notEqualImpl\": () => /* binding */ notEqualImpl,\n/* harmony export */   \"notEqual\": () => /* binding */ notEqual,\n/* harmony export */   \"notEqualConfig\": () => /* binding */ notEqualConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst notEqualImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((a, b) => (a !== b) ? 1 : 0));\nconst notEqual = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nconst notEqualConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"prodImpl\": () => /* binding */ prodImpl,\n/* harmony export */   \"prod\": () => /* binding */ prod,\n/* harmony export */   \"prodConfig\": () => /* binding */ prodConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(xDtype, 'int32');\n    const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape), outDtype);\n    const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nfunction prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nconst prodConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rangeImpl\": () => /* binding */ rangeImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"real\": () => /* binding */ real,\n/* harmony export */   \"realConfig\": () => /* binding */ realConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const real = backend.data.get(input.dataId).complexTensorInfos.real;\n    const realVal = backend.data.get(real.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the real value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nconst realConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Real,\n    backendName: 'cpu',\n    kernelFunc: real\n};\n//# sourceMappingURL=Real.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rsqrtImpl\": () => /* binding */ rsqrtImpl,\n/* harmony export */   \"rsqrt\": () => /* binding */ rsqrt,\n/* harmony export */   \"rsqrtConfig\": () => /* binding */ rsqrtConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\");\n/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst rsqrtImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((xi) => 1 / Math.sqrt(xi));\nconst rsqrt = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt, rsqrtImpl);\nconst rsqrtConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sliceImpl\": () => /* binding */ sliceImpl,\n/* harmony export */   \"slice\": () => /* binding */ slice,\n/* harmony export */   \"sliceConfig\": () => /* binding */ sliceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.isSliceContinous(shape, begin, size);\n    const length = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(size);\n    const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(shape, dtype, decodedData);\n    const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nfunction slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'slice');\n    const [$begin, $size] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.parseSliceParams(x, begin, size);\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nconst sliceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"squaredDifferenceImpl\": () => /* binding */ squaredDifferenceImpl,\n/* harmony export */   \"squaredDifference\": () => /* binding */ squaredDifference,\n/* harmony export */   \"squaredDifferenceConfig\": () => /* binding */ squaredDifferenceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst squaredDifferenceImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nconst squaredDifference = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference, squaredDifferenceImpl);\nconst squaredDifferenceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n//# sourceMappingURL=SquaredDifference.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"stridedSliceImpl\": () => /* binding */ stridedSliceImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"subImpl\": () => /* binding */ subImpl,\n/* harmony export */   \"subComplexImpl\": () => /* binding */ subComplexImpl,\n/* harmony export */   \"sub\": () => /* binding */ sub,\n/* harmony export */   \"subConfig\": () => /* binding */ subConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\");\n/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst subImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)(((aValue, bValue) => aValue - bValue));\nconst subComplexImpl = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.createComplexBinaryKernelImpl)(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nconst sub = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub, subImpl, subComplexImpl);\nconst subConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tileImpl\": () => /* binding */ tileImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nfunction tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"topKImpl\": () => /* binding */ topKImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nfunction topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(outputShape, xDtype, allTopKVals),\n        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"transpose\": () => /* binding */ transpose,\n/* harmony export */   \"transposeConfig\": () => /* binding */ transposeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nconst transposeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"transposeImpl\": () => /* binding */ transposeImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(xShape);\n    const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(xShape);\n    const newStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(newShape);\n    const result = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"uniqueImpl\": () => /* binding */ uniqueImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"simpleAbsImpl\": () => /* reexport safe */ _kernels_Abs__WEBPACK_IMPORTED_MODULE_0__.simpleAbsImpl,\n/* harmony export */   \"addImpl\": () => /* reexport safe */ _kernels_Add__WEBPACK_IMPORTED_MODULE_1__.addImpl,\n/* harmony export */   \"bincountImpl\": () => /* reexport safe */ _kernels_Bincount_impl__WEBPACK_IMPORTED_MODULE_2__.bincountImpl,\n/* harmony export */   \"bincountReduceImpl\": () => /* reexport safe */ _kernels_Bincount_impl__WEBPACK_IMPORTED_MODULE_2__.bincountReduceImpl,\n/* harmony export */   \"ceilImpl\": () => /* reexport safe */ _kernels_Ceil__WEBPACK_IMPORTED_MODULE_3__.ceilImpl,\n/* harmony export */   \"concatImpl\": () => /* reexport safe */ _kernels_Concat_impl__WEBPACK_IMPORTED_MODULE_4__.concatImpl,\n/* harmony export */   \"expImpl\": () => /* reexport safe */ _kernels_Exp__WEBPACK_IMPORTED_MODULE_5__.expImpl,\n/* harmony export */   \"expm1Impl\": () => /* reexport safe */ _kernels_Expm1__WEBPACK_IMPORTED_MODULE_6__.expm1Impl,\n/* harmony export */   \"floorImpl\": () => /* reexport safe */ _kernels_Floor__WEBPACK_IMPORTED_MODULE_7__.floorImpl,\n/* harmony export */   \"gatherV2Impl\": () => /* reexport safe */ _kernels_GatherV2_impl__WEBPACK_IMPORTED_MODULE_8__.gatherV2Impl,\n/* harmony export */   \"greaterImpl\": () => /* reexport safe */ _kernels_Greater__WEBPACK_IMPORTED_MODULE_9__.greaterImpl,\n/* harmony export */   \"lessImpl\": () => /* reexport safe */ _kernels_Less__WEBPACK_IMPORTED_MODULE_10__.lessImpl,\n/* harmony export */   \"linSpaceImpl\": () => /* reexport safe */ _kernels_LinSpace_impl__WEBPACK_IMPORTED_MODULE_11__.linSpaceImpl,\n/* harmony export */   \"logImpl\": () => /* reexport safe */ _kernels_Log__WEBPACK_IMPORTED_MODULE_12__.logImpl,\n/* harmony export */   \"maxImpl\": () => /* reexport safe */ _kernels_Max_impl__WEBPACK_IMPORTED_MODULE_13__.maxImpl,\n/* harmony export */   \"maximumImpl\": () => /* reexport safe */ _kernels_Maximum__WEBPACK_IMPORTED_MODULE_14__.maximumImpl,\n/* harmony export */   \"minimumImpl\": () => /* reexport safe */ _kernels_Minimum__WEBPACK_IMPORTED_MODULE_15__.minimumImpl,\n/* harmony export */   \"multiplyImpl\": () => /* reexport safe */ _kernels_Multiply__WEBPACK_IMPORTED_MODULE_16__.multiplyImpl,\n/* harmony export */   \"negImpl\": () => /* reexport safe */ _kernels_Neg__WEBPACK_IMPORTED_MODULE_17__.negImpl,\n/* harmony export */   \"notEqualImpl\": () => /* reexport safe */ _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_18__.notEqualImpl,\n/* harmony export */   \"prodImpl\": () => /* reexport safe */ _kernels_Prod__WEBPACK_IMPORTED_MODULE_19__.prodImpl,\n/* harmony export */   \"rangeImpl\": () => /* reexport safe */ _kernels_Range_impl__WEBPACK_IMPORTED_MODULE_20__.rangeImpl,\n/* harmony export */   \"rsqrtImpl\": () => /* reexport safe */ _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_21__.rsqrtImpl,\n/* harmony export */   \"sliceImpl\": () => /* reexport safe */ _kernels_Slice__WEBPACK_IMPORTED_MODULE_22__.sliceImpl,\n/* harmony export */   \"squaredDifferenceImpl\": () => /* reexport safe */ _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_23__.squaredDifferenceImpl,\n/* harmony export */   \"stridedSliceImpl\": () => /* reexport safe */ _kernels_StridedSlice_impl__WEBPACK_IMPORTED_MODULE_24__.stridedSliceImpl,\n/* harmony export */   \"subImpl\": () => /* reexport safe */ _kernels_Sub__WEBPACK_IMPORTED_MODULE_25__.subImpl,\n/* harmony export */   \"tileImpl\": () => /* reexport safe */ _kernels_Tile_impl__WEBPACK_IMPORTED_MODULE_26__.tileImpl,\n/* harmony export */   \"topKImpl\": () => /* reexport safe */ _kernels_TopK_impl__WEBPACK_IMPORTED_MODULE_27__.topKImpl,\n/* harmony export */   \"transposeImpl\": () => /* reexport safe */ _kernels_Transpose_impl__WEBPACK_IMPORTED_MODULE_28__.transposeImpl,\n/* harmony export */   \"uniqueImpl\": () => /* reexport safe */ _kernels_Unique_impl__WEBPACK_IMPORTED_MODULE_29__.uniqueImpl\n/* harmony export */ });\n/* harmony import */ var _kernels_Abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kernels/Abs */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js\");\n/* harmony import */ var _kernels_Add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernels/Add */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js\");\n/* harmony import */ var _kernels_Bincount_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kernels/Bincount_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js\");\n/* harmony import */ var _kernels_Ceil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernels/Ceil */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js\");\n/* harmony import */ var _kernels_Concat_impl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kernels/Concat_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js\");\n/* harmony import */ var _kernels_Exp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./kernels/Exp */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js\");\n/* harmony import */ var _kernels_Expm1__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./kernels/Expm1 */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js\");\n/* harmony import */ var _kernels_Floor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./kernels/Floor */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js\");\n/* harmony import */ var _kernels_GatherV2_impl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./kernels/GatherV2_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js\");\n/* harmony import */ var _kernels_Greater__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./kernels/Greater */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js\");\n/* harmony import */ var _kernels_Less__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./kernels/Less */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js\");\n/* harmony import */ var _kernels_LinSpace_impl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./kernels/LinSpace_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js\");\n/* harmony import */ var _kernels_Log__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./kernels/Log */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js\");\n/* harmony import */ var _kernels_Max_impl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kernels/Max_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js\");\n/* harmony import */ var _kernels_Maximum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./kernels/Maximum */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js\");\n/* harmony import */ var _kernels_Minimum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./kernels/Minimum */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js\");\n/* harmony import */ var _kernels_Multiply__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./kernels/Multiply */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js\");\n/* harmony import */ var _kernels_Neg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./kernels/Neg */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js\");\n/* harmony import */ var _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./kernels/NotEqual */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js\");\n/* harmony import */ var _kernels_Prod__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./kernels/Prod */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js\");\n/* harmony import */ var _kernels_Range_impl__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./kernels/Range_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js\");\n/* harmony import */ var _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./kernels/Rsqrt */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js\");\n/* harmony import */ var _kernels_Slice__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./kernels/Slice */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js\");\n/* harmony import */ var _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./kernels/SquaredDifference */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js\");\n/* harmony import */ var _kernels_StridedSlice_impl__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./kernels/StridedSlice_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js\");\n/* harmony import */ var _kernels_Sub__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./kernels/Sub */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js\");\n/* harmony import */ var _kernels_Tile_impl__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./kernels/Tile_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js\");\n/* harmony import */ var _kernels_TopK_impl__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./kernels/TopK_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js\");\n/* harmony import */ var _kernels_Transpose_impl__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./kernels/Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js\");\n/* harmony import */ var _kernels_Unique_impl__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./kernels/Unique_impl */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Shared functionality among backends.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=shared.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createSimpleBinaryKernelImpl\": () => /* binding */ createSimpleBinaryKernelImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nfunction createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(newShape);\n        const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(newShape);\n        const result = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(aShape);\n        const bStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(bShape);\n        const aBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"binaryKernelFunc\": () => /* binding */ binaryKernelFunc,\n/* harmony export */   \"createComplexBinaryKernelImpl\": () => /* binding */ createComplexBinaryKernelImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/* harmony import */ var _kernels_Cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernels/Cast */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js\");\n/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernels/Complex */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nfunction binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n    if (complexImpl == null) {\n        return ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        };\n    }\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const cpuBackend = backend;\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            const $aComplex = (0,_kernels_Cast__WEBPACK_IMPORTED_MODULE_2__.cast)({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n            const aReal = $aComplexVals.complexTensorInfos.real;\n            const aImag = $aComplexVals.complexTensorInfos.imag;\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n            const $bComplex = (0,_kernels_Cast__WEBPACK_IMPORTED_MODULE_2__.cast)({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n            const bReal = $bComplexVals.complexTensorInfos.real;\n            const bImag = $bComplexVals.complexTensorInfos.imag;\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n            const result = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\n            return result;\n        }\n        else {\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        }\n    };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nfunction createComplexBinaryKernelImpl(op) {\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n        const resultShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(resultShape);\n        const resultRank = resultShape.length;\n        const resultStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(resultShape);\n        const resultRealVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', resultSize);\n        const resultImagVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', resultSize);\n        const aBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(aShape, resultShape);\n        const bBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(bShape, resultShape);\n        const aVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n        const bVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n        const aRank = aShape.length;\n        const aStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(aShape);\n        const bRank = bShape.length;\n        const bStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(bShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                resultRealVals[i] = result.real;\n                resultImagVals[i] = result.imag;\n            }\n        }\n        else {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const loc = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(bLoc, bRank, bStrides);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                resultRealVals[i] = opResult.real;\n                resultImagVals[i] = opResult.imag;\n            }\n        }\n        return [resultRealVals, resultImagVals, resultShape];\n    };\n}\n//# sourceMappingURL=binary_utils.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createSimpleUnaryImpl\": () => /* binding */ createSimpleUnaryImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Template that creates implementation for unary op.\n */\nfunction createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"unaryKernelFunc\": () => /* binding */ unaryKernelFunc,\n/* harmony export */   \"unaryKernelFuncFromImpl\": () => /* binding */ unaryKernelFuncFromImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nfunction unaryKernelFunc(name, op, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n        const $dtype = dtype || x.dtype;\n        const newValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType($dtype, xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nfunction unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const $dtype = dtype || x.dtype;\n        const newValues = unaryImpl(values, $dtype, attrs);\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n//# sourceMappingURL=unary_utils.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zeros\": () => /* binding */ zeros\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Complex */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nfunction zeros(backend, shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(backend, shape, 'float32');\n        const imag = zeros(backend, shape, 'float32');\n        return (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_1__.complex)({ inputs: { real, imag }, backend });\n    }\n    const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape), dtype);\n    return backend.makeTensorInfo(shape, dtype, values);\n}\n//# sourceMappingURL=zeros_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AddNProgram\": () => /* binding */ AddNProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass AddNProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=addn_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AddNPackedProgram\": () => /* binding */ AddNPackedProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass AddNPackedProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=addn_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArgMinMaxProgram\": () => /* binding */ ArgMinMaxProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArgMinMaxPackedProgram\": () => /* binding */ ArgMinMaxPackedProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);\n        const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AvgPool2DBackpropProgram\": () => /* binding */ AvgPool2DBackpropProgram,\n/* harmony export */   \"AvgPool3DBackpropProgram\": () => /* binding */ AvgPool3DBackpropProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nclass AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=avg_pool_backprop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EPSILON_FLOAT32\": () => /* binding */ EPSILON_FLOAT32,\n/* harmony export */   \"EPSILON_FLOAT16\": () => /* binding */ EPSILON_FLOAT16,\n/* harmony export */   \"getBinaryCache\": () => /* binding */ getBinaryCache,\n/* harmony export */   \"MathBackendWebGL\": () => /* binding */ MathBackendWebGL\n/* harmony export */ });\n/* harmony import */ var _flags_webgl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flags_webgl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js\");\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js\");\n/* harmony import */ var _decode_matrix_gpu__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./decode_matrix_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js\");\n/* harmony import */ var _decode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./decode_matrix_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js\");\n/* harmony import */ var _encode_float_gpu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./encode_float_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js\");\n/* harmony import */ var _encode_float_packed_gpu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./encode_float_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js\");\n/* harmony import */ var _encode_matrix_gpu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./encode_matrix_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js\");\n/* harmony import */ var _encode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./encode_matrix_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js\");\n/* harmony import */ var _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gpgpu_context */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js\");\n/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./gpgpu_math */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _pack_gpu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./pack_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js\");\n/* harmony import */ var _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./reshape_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/* harmony import */ var _texture_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./texture_manager */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./unaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js\");\n/* harmony import */ var _unpack_gpu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./unpack_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst whereImpl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.kernel_impls.whereImpl;\nconst EPSILON_FLOAT32 = 1e-7;\nconst EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nfunction getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().global.screen.height * (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nclass MathBackendWebGL extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_2__.getWebGLContext)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new _texture_manager__WEBPACK_IMPORTED_MODULE_4__.TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.DataStorage(this, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.engine)());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = {};\n        this.texData.set(dataId, {\n            shape,\n            dtype,\n            values,\n            usage: _tex_util__WEBPACK_IMPORTED_MODULE_5__.TextureUsage.UPLOAD,\n            refCount: 1,\n            complexParentRefCount: 0\n        });\n        return dataId;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype) {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, {\n            shape,\n            dtype,\n            values,\n            usage: _tex_util__WEBPACK_IMPORTED_MODULE_5__.TextureUsage.UPLOAD,\n            refCount: 1,\n            complexParentRefCount: 0\n        });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        const dataId = tensorInfo.dataId;\n        if (this.texData.has(dataId)) {\n            const textureData = this.texData.get(dataId);\n            textureData.refCount--;\n            if (textureData.refCount < 1) {\n                this.disposeData(dataId);\n            }\n        }\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_6__.UnaryOpPackedProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.CLONE);\n            }\n            else {\n                program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.UnaryOpProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_6__.UnaryOpPackedProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.CLONE);\n            }\n            else {\n                program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.UnaryOpProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ..._tex_util__WEBPACK_IMPORTED_MODULE_5__.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            this.disposeData(dataId);\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.buffer)(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!_webgl_util__WEBPACK_IMPORTED_MODULE_8__.canBeRepresented(num)) {\n                if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sizeFromShape(shape);\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ..._tex_util__WEBPACK_IMPORTED_MODULE_5__.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? _webgl_util__WEBPACK_IMPORTED_MODULE_8__.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new _encode_float_packed_gpu__WEBPACK_IMPORTED_MODULE_9__.EncodeFloatPackedProgram(outputShape) :\n            new _encode_float_gpu__WEBPACK_IMPORTED_MODULE_10__.EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    disposeData(dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return;\n        }\n        // Trying to dispose a textureData that has a 'kept' refCount, e.g. trying\n        // to dispose a tensor whose data bucket is shared with a complex tensor. In\n        // this case we are removing a reference to the textureData, but we\n        // shouldn't actually dispose the texture.\n        if (this.texData.get(dataId).complexParentRefCount > 0) {\n            this.texData.get(dataId).refCount--;\n            return;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.texData.get(complexTensorInfos.real.dataId).complexParentRefCount--;\n            this.disposeIntermediateTensorInfo(complexTensorInfos.real);\n            this.texData.get(complexTensorInfos.imag.dataId).complexParentRefCount--;\n            this.disposeIntermediateTensorInfo(complexTensorInfos.imag);\n        }\n        this.texData.delete(dataId);\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.engine)().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n            cpuBackend == null) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_6__.UnaryOpPackedProgram(x.shape, op);\n        return this.compileAndRun(program, [x], dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_11__.simpleAbsImplCPU)(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.ABS, x.dtype);\n        }\n        const program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.UnaryOpProgram(x.shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_7__.ABS);\n        return this.compileAndRun(program, [x]);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isString(values[0])) {\n            const encodedValues = values.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.engine)().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new _unpack_gpu__WEBPACK_IMPORTED_MODULE_12__.UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new _pack_gpu__WEBPACK_IMPORTED_MODULE_13__.PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            _webgl_util__WEBPACK_IMPORTED_MODULE_8__.getBatchDim(input.shape),\n            ..._webgl_util__WEBPACK_IMPORTED_MODULE_8__.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            _webgl_util__WEBPACK_IMPORTED_MODULE_8__.getBatchDim(afterShape), ..._webgl_util__WEBPACK_IMPORTED_MODULE_8__.getRowsCols(afterShape)\n        ];\n        const program = new _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_14__.ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = _webgl_util__WEBPACK_IMPORTED_MODULE_8__.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new _decode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_15__.DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new _decode_matrix_gpu__WEBPACK_IMPORTED_MODULE_16__.DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === _tex_util__WEBPACK_IMPORTED_MODULE_5__.PackingScheme.DENSE) {\n            const texelShape = _tex_util__WEBPACK_IMPORTED_MODULE_5__.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sizeFromShape(input.shape) <=\n                        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !_webgl_util__WEBPACK_IMPORTED_MODULE_8__.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = _gpgpu_math__WEBPACK_IMPORTED_MODULE_17__.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return _gpgpu_math__WEBPACK_IMPORTED_MODULE_17__.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        _gpgpu_math__WEBPACK_IMPORTED_MODULE_17__.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.engine)().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {\n                if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEBUG');\n                    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().set('DEBUG', false);\n                    const underflowCheckValue = this.abs((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(1e-8)).dataSync()[0];\n                    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = _webgl_util__WEBPACK_IMPORTED_MODULE_8__.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = _webgl_util__WEBPACK_IMPORTED_MODULE_8__.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_5__.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new _encode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_18__.EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new _encode_matrix_gpu__WEBPACK_IMPORTED_MODULE_19__.EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    _tex_util__WEBPACK_IMPORTED_MODULE_5__.TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    _tex_util__WEBPACK_IMPORTED_MODULE_5__.TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.bytesPerElement(dtype);\n    }\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"version_webgl\": () => /* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_1__.version,\n/* harmony export */   \"GPGPUContext\": () => /* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext,\n/* harmony export */   \"MathBackendWebGL\": () => /* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.MathBackendWebGL,\n/* harmony export */   \"forceHalfFloat\": () => /* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.forceHalfFloat,\n/* harmony export */   \"gpgpu_util\": () => /* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.gpgpu_util,\n/* harmony export */   \"setWebGLContext\": () => /* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.setWebGLContext,\n/* harmony export */   \"webgl_util\": () => /* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.webgl_util,\n/* harmony export */   \"webgl\": () => /* binding */ webgl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _backend_webgl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend_webgl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js\");\n/* harmony import */ var _webgl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webgl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js\");\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is the webgl backend without auto kernel registration.\n\n\n\nif (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.device_util.isBrowser()) {\n    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerBackend)('webgl', () => new _backend_webgl__WEBPACK_IMPORTED_MODULE_2__.MathBackendWebGL(), 2 /* priority */);\n}\n// Export webgl utilities\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\n\nconst webgl = { forceHalfFloat: _webgl__WEBPACK_IMPORTED_MODULE_3__.forceHalfFloat };\n//# sourceMappingURL=base.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BatchNormProgram\": () => /* binding */ BatchNormProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BatchNormPackedProgram\": () => /* binding */ BatchNormPackedProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass BatchNormPackedProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = 'vec4(0.0)';\n        if (offsetShape != null) {\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = 'vec4(1.0)';\n        if (scaleShape != null) {\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"COMPLEX_MULTIPLY\": () => /* binding */ COMPLEX_MULTIPLY,\n/* harmony export */   \"BinaryOpComplexProgram\": () => /* binding */ BinaryOpComplexProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nconst COMPLEX_MULTIPLY = {\n    REAL: 'return areal * breal - aimag * bimag;',\n    IMAG: 'return areal * bimag + aimag * breal;'\n};\nclass BinaryOpComplexProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n        this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_complex_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CHECK_NAN_SNIPPET\": () => /* binding */ CHECK_NAN_SNIPPET,\n/* harmony export */   \"SQUARED_DIFFERENCE\": () => /* binding */ SQUARED_DIFFERENCE,\n/* harmony export */   \"BinaryOpProgram\": () => /* binding */ BinaryOpProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nclass BinaryOpProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CHECK_NAN_SNIPPET\": () => /* binding */ CHECK_NAN_SNIPPET,\n/* harmony export */   \"ELU_DER\": () => /* binding */ ELU_DER,\n/* harmony export */   \"NOT_EQUAL\": () => /* binding */ NOT_EQUAL,\n/* harmony export */   \"BinaryOpPackedProgram\": () => /* binding */ BinaryOpPackedProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nconst ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nconst NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nclass BinaryOpPackedProgram {\n    constructor(op, aShape, bShape, checkOutOfBounds = false) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const rank = this.outputShape.length;\n        let checkOutOfBoundsString = '';\n        if (checkOutOfBounds) {\n            if (rank === 0 || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(this.outputShape) === 1) {\n                checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n            }\n            else {\n                const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);\n                checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n                if (rank === 1) {\n                    checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                }\n                else {\n                    const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('coords', rank);\n                    checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                }\n            }\n        }\n        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearWebGLContext\": () => /* binding */ clearWebGLContext,\n/* harmony export */   \"setWebGLContext\": () => /* binding */ setWebGLContext,\n/* harmony export */   \"getWebGLContext\": () => /* binding */ getWebGLContext\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: true\n};\nfunction clearWebGLContext(webGLVersion) {\n    delete contexts[webGLVersion];\n}\nfunction setWebGLContext(webGLVersion, gl) {\n    contexts[webGLVersion] = gl;\n}\nfunction getWebGLContext(webGLVersion) {\n    if (!(webGLVersion in contexts)) {\n        const newCtx = getWebGLRenderingContext(webGLVersion);\n        if (newCtx !== null) {\n            contexts[webGLVersion] = newCtx;\n        }\n        else {\n            console.log('Could not get context for WebGL version', webGLVersion);\n            return null;\n        }\n    }\n    const gl = contexts[webGLVersion];\n    if (gl.isContextLost()) {\n        delete contexts[webGLVersion];\n        return getWebGLContext(webGLVersion);\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.BLEND);\n    gl.disable(gl.DITHER);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SAMPLE_COVERAGE);\n    gl.enable(gl.SCISSOR_TEST);\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n    if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n        return new OffscreenCanvas(300, 150);\n    }\n    else if (typeof document !== 'undefined') {\n        return document.createElement('canvas');\n    }\n    else {\n        throw new Error('Cannot create a canvas in this context');\n    }\n}\nfunction getWebGLRenderingContext(webGLVersion) {\n    if (webGLVersion !== 1 && webGLVersion !== 2) {\n        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n    }\n    const canvas = createCanvas(webGLVersion);\n    canvas.addEventListener('webglcontextlost', (ev) => {\n        ev.preventDefault();\n        delete contexts[webGLVersion];\n    }, false);\n    if (webGLVersion === 1) {\n        return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n    }\n    return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}\n//# sourceMappingURL=canvas_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClipProgram\": () => /* binding */ ClipProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ClipProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n    }\n    getCustomSetupFunc(min, max) {\n        return (gpgpu, webGLProgram) => {\n            if (this.minLoc == null) {\n                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n            }\n            gpgpu.gl.uniform1f(this.minLoc, min);\n            gpgpu.gl.uniform1f(this.maxLoc, max);\n        };\n    }\n}\n//# sourceMappingURL=clip_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClipPackedProgram\": () => /* binding */ ClipPackedProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ClipPackedProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n    }\n    getCustomSetupFunc(min, max) {\n        return (gpgpu, webGLProgram) => {\n            if (this.minLoc == null) {\n                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n            }\n            gpgpu.gl.uniform1f(this.minLoc, min);\n            gpgpu.gl.uniform1f(this.maxLoc, max);\n        };\n    }\n}\n//# sourceMappingURL=clip_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ComplexAbsProgram\": () => /* binding */ ComplexAbsProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ComplexAbsProgram {\n    constructor(shape) {\n        this.variableNames = ['real', 'imag'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n    }\n}\n//# sourceMappingURL=complex_abs_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConcatProgram\": () => /* binding */ ConcatProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass ConcatProgram {\n    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n    constructor(shapes) {\n        this.outputShape = [];\n        this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(shapes, 1 /* axis */);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][1];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][1];\n        }\n        const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            snippets.push(`else if (yC < ${offsets[i]}) ` +\n                `setOutput(getT${i}(yR, yC-${shift}));`);\n        }\n        const lastIndex = offsets.length;\n        const lastShift = offsets[offsets.length - 1];\n        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n    }\n}\n//# sourceMappingURL=concat_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConcatPackedProgram\": () => /* binding */ ConcatPackedProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass ConcatPackedProgram {\n    constructor(shapes, axis) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(shapes, axis);\n        const shape = this.outputShape;\n        const rank = shape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);\n        const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('coords', rank);\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][axis];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][axis];\n        }\n        const channel = channels[axis];\n        const lastChannels = channels.slice(-2);\n        const allChannels = channels.join();\n        let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            // Note: the >= comparison below may seem unnecessary given the check\n            // above but is needed to workaround branch execution issues on some\n            // devices. It makes all the conditions exclusive without relying on\n            // execution order.\n            getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n        }\n        const lastIndex = offsets.length;\n        const shift = offsets[offsets.length - 1];\n        getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n        this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n    }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n        if (idx === channelIdx) {\n            return `${c} - ${shift}`;\n        }\n        else {\n            return c;\n        }\n    });\n    return res.join();\n}\n//# sourceMappingURL=concat_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Conv2DDerFilterProgram\": () => /* binding */ Conv2DDerFilterProgram,\n/* harmony export */   \"Conv2DDerInputProgram\": () => /* binding */ Conv2DDerInputProgram,\n/* harmony export */   \"Conv3DDerFilterProgram\": () => /* binding */ Conv3DDerFilterProgram,\n/* harmony export */   \"Conv3DDerInputProgram\": () => /* binding */ Conv3DDerInputProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass Conv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nclass Conv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nclass Conv3DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nclass Conv3DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = filterDepth - 1 - convInfo.padInfo.front;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_backprop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DepthwiseConv2DDerFilterProgram\": () => /* binding */ DepthwiseConv2DDerFilterProgram,\n/* harmony export */   \"DepthwiseConv2DDerInputProgram\": () => /* binding */ DepthwiseConv2DDerInputProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass DepthwiseConv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nclass DepthwiseConv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_backprop_gpu_depthwise.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Conv2DProgram\": () => /* binding */ Conv2DProgram,\n/* harmony export */   \"Conv3DProgram\": () => /* binding */ Conv3DProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass Conv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivationWeights) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivationWeights) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\nclass Conv3DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DepthwiseConv2DProgram\": () => /* binding */ DepthwiseConv2DProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu_depthwise.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DepthwiseConvPacked2DProgram\": () => /* binding */ DepthwiseConvPacked2DProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `int xR; int xC; int xCOffset;`;\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n            }\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        for (let r = 0; r < filterHeight; r++) {\n            for (let texelC = 0; texelC < texelsAcross; texelC++) {\n                const c = texelC * 2;\n                mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n                if (strideWidth === 1) {\n                    if (c < filterWidth) {\n                        // If padding is odd, the outer texels have to be composed.\n                        if (padLeft % 2 === 1) {\n                            // TODO: Ensure vec4 previous does not result in redundant sample,\n                            // and avoid setting xTexelRC's that exceed the boundary in the\n                            // first place rather than resetting them to vec4(0)).\n                            // To compute xCOffset:\n                            // - If padding is odd, we must add 1 to ensure we ask for an\n                            // even-numbered row.\n                            // - We subtract 2 to access the previous texel.\n                            mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n                        }\n                        else {\n                            // Padding is even, so xRC corresponds to a single texel.\n                            mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n                        }\n                        if (c + 1 < filterWidth) {\n                            // If dilation is even, the second entry should match the first\n                            // (either both are composed or both are single samples). But if\n                            // dilation is odd, then the second entry should be the opposite\n                            // of the first (if the first is composed, the second is a single\n                            // sample, and vice versa.)\n                            const nextTexelOffset = padLeft % 2 === 0 ?\n                                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.nearestLargerEven(dilationWidth) :\n                                dilationWidth;\n                            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n                                // If dilation > 1 then the xRC's will not be able to share any\n                                // values, so each xRC will require two unique calls to getX.\n                                if (dilationWidth > 1) {\n                                    mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                                }\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n                            }\n                            else {\n                                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n                            }\n                        }\n                    }\n                }\n                else { // stride > 1\n                    if (c < filterWidth) {\n                        mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n                        // Depending on whether padLeft is even or odd, we want either the\n                        // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n                        // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n                        // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n                        // need to come from the xy channels of a new texel, hence the `vec4\n                        // final` initialized below.\n                        if (padLeft % 2 === 1) {\n                            mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n                            }\n                        }\n                        else {\n                            mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n                            }\n                        }\n                        mainLoop += `}`;\n                    }\n                }\n                if (c < filterWidth) {\n                    mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n                    if (c + 1 < filterWidth) {\n                        mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n                    }\n                }\n            }\n        }\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n            }\n        }\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_packed_gpu_depthwise.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CropAndResizeProgram\": () => /* binding */ CropAndResizeProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass CropAndResizeProgram {\n    constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n        this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n        this.outputShape = [];\n        const [batch, imageHeight, imageWidth, depth] = imageShape;\n        const [numBoxes,] = boxShape;\n        const [cropHeight, cropWidth] = cropSize;\n        this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n        const methodId = method === 'bilinear' ? 1 : 0;\n        const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n        const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n            [\n                `${(imageHeight - 1) / (cropHeight - 1)}`,\n                '(y2-y1) * height_ratio',\n                `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (y1+y2) * ${inputHeightFloat}`,\n            ];\n        const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n            [\n                `${(imageWidth - 1) / (cropWidth - 1)}`,\n                '(x2-x1) * width_ratio',\n                `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (x1+x2) * ${inputWidthFloat}`,\n            ];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n        this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=crop_and_resize_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CumSumProgram\": () => /* binding */ CumSumProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n\nclass CumSumProgram {\n    constructor(shape, exclusive, reverse) {\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        const rank = shape.length;\n        const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n        const length = shape[shape.length - 1];\n        let condition = '';\n        let idxString = '';\n        // When exclusive is set, the cumsum op becomes roll op that copies the\n        // value from the previous index based on the direction specified by the\n        // reverse flag.\n        if (exclusive) {\n            condition = reverse ? `end != ${length - 1}` : 'end != 0';\n            idxString = reverse ? 'end + 1' : 'end - 1';\n        }\n        else {\n            condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n            idxString = (reverse ? 'end + pow2' : 'end - pow2');\n        }\n        this.userCode = `\n      uniform float index;\n      void main() {\n        ${(0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n    }\n    getCustomSetupFunc(index) {\n        return (gpgpu, webGLProgram) => {\n            if (this.index == null) {\n                this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n            }\n            gpgpu.gl.uniform1f(this.index, index);\n        };\n    }\n}\nfunction getCoords(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.x, ${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.x, ${name}.y, ${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\nfunction getFinalCoord(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=cumsum_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DecodeMatrixProgram\": () => /* binding */ DecodeMatrixProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass DecodeMatrixProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.outPackingScheme = _tex_util__WEBPACK_IMPORTED_MODULE_0__.PackingScheme.DENSE;\n        const texShape = (0,_tex_util__WEBPACK_IMPORTED_MODULE_0__.getDenseTexShape)(outputShape);\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=decode_matrix_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DecodeMatrixPackedProgram\": () => /* binding */ DecodeMatrixPackedProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass DecodeMatrixPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outPackingScheme = _tex_util__WEBPACK_IMPORTED_MODULE_0__.PackingScheme.DENSE;\n        const texShape = (0,_tex_util__WEBPACK_IMPORTED_MODULE_0__.getDenseTexShape)(outputShape);\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=decode_matrix_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DepthToSpaceProgram\": () => /* binding */ DepthToSpaceProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass DepthToSpaceProgram {\n    constructor(outputShape, blockSize, dataFormat) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.blockSize = blockSize;\n        this.dataFormat = dataFormat;\n        this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n    }\n    getHeightCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[1]`;\n        }\n        else {\n            return `coords[2]`;\n        }\n    }\n    getWidthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[2]`;\n        }\n        else {\n            return `coords[3]`;\n        }\n    }\n    getDepthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[3]`;\n        }\n        else {\n            return `coords[1]`;\n        }\n    }\n    getOutputDepthSize() {\n        if (this.dataFormat === 'NHWC') {\n            return this.outputShape[3];\n        }\n        else {\n            return this.outputShape[1];\n        }\n    }\n    getInputSamplingString() {\n        if (this.dataFormat === 'NHWC') {\n            return `getX(b, in_h, in_w, in_d)`;\n        }\n        else {\n            return `getX(b, in_d, in_h, in_w)`;\n        }\n    }\n}\n//# sourceMappingURL=depth_to_space_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiagProgram\": () => /* binding */ DiagProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass DiagProgram {\n    constructor(size) {\n        this.variableNames = ['X'];\n        this.outputShape = [size, size];\n        this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=diag_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dilation2DProgram\": () => /* binding */ Dilation2DProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass Dilation2DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;\n        const { top: padTop, left: padLeft } = padInfo;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=dilation_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EncodeFloatProgram\": () => /* binding */ EncodeFloatProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass EncodeFloatProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.outTexUsage = _tex_util__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.DOWNLOAD;\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_float_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EncodeFloatPackedProgram\": () => /* binding */ EncodeFloatPackedProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass EncodeFloatPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outTexUsage = _tex_util__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.DOWNLOAD;\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_float_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EncodeMatrixProgram\": () => /* binding */ EncodeMatrixProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass EncodeMatrixProgram {\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();\n        const [height, width] = texShape;\n        this.outputShape = outputShape;\n        let output = `result`;\n        if (inputIsUnsignedByte) {\n            output = `floor(result * 255. + 0.5)`;\n        }\n        this.userCode = `\n      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_matrix_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EncodeMatrixPackedProgram\": () => /* binding */ EncodeMatrixPackedProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nclass EncodeMatrixPackedProgram {\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();\n        const [height, width] = texShape;\n        this.outputShape = outputShape;\n        let mainLoop = '';\n        let output = 'result';\n        if (inputIsUnsignedByte) {\n            output = 'floor(result * 255. + 0.5)';\n        }\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                const channel = row * 2 + col;\n                mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_matrix_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FFTProgram\": () => /* binding */ FFTProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass FFTProgram {\n    constructor(component, inputShape, inverse) {\n        this.variableNames = ['real', 'imag'];\n        const innerDim = inputShape[1];\n        this.outputShape = inputShape;\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n        let opString;\n        if (component === 'real') {\n            opString = 'return real * expR - imag * expI;';\n        }\n        else if (component === 'imag') {\n            opString = 'return real * expI + imag * expR;';\n        }\n        else {\n            throw new Error(`FFT component must be either \"real\" or \"imag\", got ${component}.`);\n        }\n        this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=fft_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FillProgram\": () => /* binding */ FillProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass FillProgram {\n    constructor(shape, value) {\n        this.outputShape = [];\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n    }\n    getCustomSetupFunc(value) {\n        return (gpgpu, webGLProgram) => {\n            if (this.valueLoc == null) {\n                this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n            }\n            gpgpu.gl.uniform1f(this.valueLoc, value);\n        };\n    }\n}\n//# sourceMappingURL=fill_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst ENV = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if ((0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isWebGLVersionEnabled)(2)) {\n        return 2;\n    }\n    else if ((0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isWebGLVersionEnabled)(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLMaxTextureSize)(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.getMaxTexturesInShader)(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLDisjointQueryTimerVersion)(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isCapableOfRenderingToFloatTexture)(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isDownloadFloatTextureEnabled)(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isWebGLFenceEnabled)(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n//# sourceMappingURL=flags_webgl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FlipLeftRightProgram\": () => /* binding */ FlipLeftRightProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass FlipLeftRightProgram {\n    constructor(imageShape) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=flip_left_right_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GatherProgram\": () => /* binding */ GatherProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass GatherProgram {\n    constructor(aShape, outputShape) {\n        this.variableNames = ['A', 'indices'];\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);\n        const sourceCoords = getSourceCoords(aShape, 2);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        if (i === 2) {\n            sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n        }\n        else {\n            sourceCoords.push(`${currentCoords[i]}`);\n        }\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=gather_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GatherNDProgram\": () => /* binding */ GatherNDProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n\nclass GatherNDProgram {\n    constructor(sliceDim, strides, shape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const stridesType = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(strides.length);\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(shape.length);\n        const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=gather_nd_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getGlslDifferences\": () => /* binding */ getGlslDifferences\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction getGlslDifferences() {\n    let version;\n    let attribute;\n    let varyingVs;\n    let varyingFs;\n    let texture2D;\n    let output;\n    let defineOutput;\n    let defineSpecialNaN;\n    let defineSpecialInf;\n    let defineRound;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {\n        version = '#version 300 es';\n        attribute = 'in';\n        varyingVs = 'out';\n        varyingFs = 'in';\n        texture2D = 'texture';\n        output = 'outputColor';\n        defineOutput = 'out vec4 outputColor;';\n        // Use custom isnan definition to work across differences between\n        // implementations on various platforms. While this should happen in ANGLE\n        // we still see differences between android and windows (on chrome) when\n        // using isnan directly.\n        defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n        // In webgl 2 we do not need to specify a custom isinf so there is no\n        // need for a special INFINITY constant.\n        defineSpecialInf = ``;\n        defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    else {\n        version = '';\n        attribute = 'attribute';\n        varyingVs = 'varying';\n        varyingFs = 'varying';\n        texture2D = 'texture2D';\n        output = 'gl_FragColor';\n        defineOutput = '';\n        // WebGL1 has no built in isnan so we define one here.\n        defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n        defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n        defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    return {\n        version,\n        attribute,\n        varyingVs,\n        varyingFs,\n        texture2D,\n        output,\n        defineOutput,\n        defineSpecialNaN,\n        defineSpecialInf,\n        defineRound\n    };\n}\n//# sourceMappingURL=glsl_version.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GPGPUContext\": () => /* binding */ GPGPUContext,\n/* harmony export */   \"linearSearchLastTrue\": () => /* binding */ linearSearchLastTrue\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js\");\n/* harmony import */ var _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gpgpu_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nclass GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.setWebGLContext)(glVersion, gl);\n        }\n        else {\n            this.gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                _webgl_util__WEBPACK_IMPORTED_MODULE_2__.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (_webgl_util__WEBPACK_IMPORTED_MODULE_2__.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    _webgl_util__WEBPACK_IMPORTED_MODULE_2__.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (_webgl_util__WEBPACK_IMPORTED_MODULE_2__.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    _webgl_util__WEBPACK_IMPORTED_MODULE_2__.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (_webgl_util__WEBPACK_IMPORTED_MODULE_2__.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (_webgl_util__WEBPACK_IMPORTED_MODULE_2__.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createVertexBuffer(this.gl);\n        this.indexBuffer = _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createIndexBuffer(this.gl);\n        this.framebuffer = _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createFramebuffer(this.gl);\n        this.textureConfig =\n            _tex_util__WEBPACK_IMPORTED_MODULE_4__.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.finish());\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShaderSource) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        const fragmentShader = _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createFragmentShader(gl, fragmentShaderSource);\n        const vertexShader = _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.createVertexShader(gl);\n        const program = _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createProgram(gl);\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.linkProgram(gl, program);\n        if (this.debug) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = _gpgpu_util__WEBPACK_IMPORTED_MODULE_3__.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateProgram(this.gl, this.program);\n        }\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return _webgl_util__WEBPACK_IMPORTED_MODULE_2__.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return _webgl_util__WEBPACK_IMPORTED_MODULE_2__.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_4__.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateProgram(this.gl, this.program);\n        }\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                _webgl_util__WEBPACK_IMPORTED_MODULE_2__.getExtensionOrThrow(this.gl, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        });\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nfunction linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n//# sourceMappingURL=gpgpu_context.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"compileProgram\": () => /* binding */ compileProgram,\n/* harmony export */   \"runProgram\": () => /* binding */ runProgram,\n/* harmony export */   \"makeShaderKey\": () => /* binding */ makeShaderKey\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction compileProgram(gpgpu, program, inputs, output) {\n    const userCode = program.userCode;\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = _shader_compiler__WEBPACK_IMPORTED_MODULE_1__.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n    const webGLProgram = gpgpu.createProgram(source);\n    // Add special uniforms (NAN, INFINITY)\n    let infLoc = null;\n    const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const uniformLocations = {};\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        const shouldThrow = false;\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    }\n    return {\n        program,\n        source,\n        webGLProgram,\n        uniformLocations,\n        inShapeInfos,\n        outShapeInfo,\n        infLoc,\n        nanLoc,\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nfunction runProgram(gpgpu, binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n    });\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nfunction makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n        keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\n//# sourceMappingURL=gpgpu_math.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createVertexShader\": () => /* binding */ createVertexShader,\n/* harmony export */   \"createVertexBuffer\": () => /* binding */ createVertexBuffer,\n/* harmony export */   \"createIndexBuffer\": () => /* binding */ createIndexBuffer,\n/* harmony export */   \"getInternalFormatForFloat32MatrixTexture\": () => /* binding */ getInternalFormatForFloat32MatrixTexture,\n/* harmony export */   \"createFloat32MatrixTexture\": () => /* binding */ createFloat32MatrixTexture,\n/* harmony export */   \"getInternalFormatForFloat16MatrixTexture\": () => /* binding */ getInternalFormatForFloat16MatrixTexture,\n/* harmony export */   \"createFloat16MatrixTexture\": () => /* binding */ createFloat16MatrixTexture,\n/* harmony export */   \"getInternalFormatForUnsignedBytesMatrixTexture\": () => /* binding */ getInternalFormatForUnsignedBytesMatrixTexture,\n/* harmony export */   \"createUnsignedBytesMatrixTexture\": () => /* binding */ createUnsignedBytesMatrixTexture,\n/* harmony export */   \"getInternalFormatForPackedMatrixTexture\": () => /* binding */ getInternalFormatForPackedMatrixTexture,\n/* harmony export */   \"createPackedMatrixTexture\": () => /* binding */ createPackedMatrixTexture,\n/* harmony export */   \"getInternalFormatForFloat16PackedMatrixTexture\": () => /* binding */ getInternalFormatForFloat16PackedMatrixTexture,\n/* harmony export */   \"createFloat16PackedMatrixTexture\": () => /* binding */ createFloat16PackedMatrixTexture,\n/* harmony export */   \"bindVertexProgramAttributeStreams\": () => /* binding */ bindVertexProgramAttributeStreams,\n/* harmony export */   \"uploadDenseMatrixToTexture\": () => /* binding */ uploadDenseMatrixToTexture,\n/* harmony export */   \"uploadPixelDataToTexture\": () => /* binding */ uploadPixelDataToTexture,\n/* harmony export */   \"createBufferFromOutputTexture\": () => /* binding */ createBufferFromOutputTexture,\n/* harmony export */   \"downloadFloat32MatrixFromBuffer\": () => /* binding */ downloadFloat32MatrixFromBuffer,\n/* harmony export */   \"downloadByteEncodedFloatMatrixFromOutputTexture\": () => /* binding */ downloadByteEncodedFloatMatrixFromOutputTexture,\n/* harmony export */   \"downloadPackedMatrixFromBuffer\": () => /* binding */ downloadPackedMatrixFromBuffer,\n/* harmony export */   \"downloadMatrixFromPackedOutputTexture\": () => /* binding */ downloadMatrixFromPackedOutputTexture\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction createVertexShader(gl) {\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return _webgl_util__WEBPACK_IMPORTED_MODULE_1__.createVertexShader(gl, vertexShaderSource);\n}\nfunction createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return _webgl_util__WEBPACK_IMPORTED_MODULE_1__.createStaticVertexBuffer(gl, vertexArray);\n}\nfunction createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return _webgl_util__WEBPACK_IMPORTED_MODULE_1__.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.validateTextureSize(width, height);\n    const texture = _webgl_util__WEBPACK_IMPORTED_MODULE_1__.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return texture;\n}\nfunction getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nfunction createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_2__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nfunction getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nfunction createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_2__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nfunction getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nfunction createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_2__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nfunction getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nfunction createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_2__.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nfunction getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nfunction createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_2__.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nfunction bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = _webgl_util__WEBPACK_IMPORTED_MODULE_1__.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        _webgl_util__WEBPACK_IMPORTED_MODULE_1__.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nfunction uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nfunction uploadPixelDataToTexture(gl, texture, pixels) {\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n    else {\n        _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nfunction createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nfunction downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nfunction downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = _tex_util__WEBPACK_IMPORTED_MODULE_2__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(_tex_util__WEBPACK_IMPORTED_MODULE_2__.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nfunction downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(_tex_util__WEBPACK_IMPORTED_MODULE_2__.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nfunction downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    _webgl_util__WEBPACK_IMPORTED_MODULE_1__.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n//# sourceMappingURL=gpgpu_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Im2ColPackedProgram\": () => /* binding */ Im2ColPackedProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass Im2ColPackedProgram {\n    constructor(outputShape, inputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const { filterWidth, inChannels, strideWidth, strideHeight, padInfo, outWidth, dilationWidth, dilationHeight, dataFormat } = convInfo;\n        const { left, top } = padInfo;\n        const itemsPerBlockRow = inChannels * filterWidth;\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 0 : 1;\n        const colDim = isChannelsLast ? 1 : 2;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=im2col_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GPGPUContext\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.GPGPUContext,\n/* harmony export */   \"MathBackendWebGL\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.MathBackendWebGL,\n/* harmony export */   \"forceHalfFloat\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.forceHalfFloat,\n/* harmony export */   \"gpgpu_util\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.gpgpu_util,\n/* harmony export */   \"setWebGLContext\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.setWebGLContext,\n/* harmony export */   \"version_webgl\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.version_webgl,\n/* harmony export */   \"webgl\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.webgl,\n/* harmony export */   \"webgl_util\": () => /* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.webgl_util\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js\");\n/* harmony import */ var _register_all_kernels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./register_all_kernels */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// All exports from this package should be in base.\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"argMinMaxReduce\": () => /* binding */ argMinMaxReduce\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _argminmax_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../argminmax_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js\");\n/* harmony import */ var _argminmax_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../argminmax_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js\");\n/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernels/Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new _argminmax_gpu__WEBPACK_IMPORTED_MODULE_1__.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOptimalWindowSize(inSize);\n    const program = new _argminmax_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nfunction argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n        const a2D = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({ inputs: { x }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n//# sourceMappingURL=arg_min_max.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"int\": () => /* binding */ int\n/* harmony export */ });\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst TO_INT = `return float(int(x));`;\nfunction int(input, backend) {\n    const program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_0__.UnaryOpProgram(input.shape, TO_INT);\n    const output = backend.runWebGLProgram(program, [input], 'int32');\n    return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };\n}\n//# sourceMappingURL=int.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CHECK_NAN_SNIPPET_UNARY\": () => /* binding */ CHECK_NAN_SNIPPET_UNARY,\n/* harmony export */   \"CHECK_NAN_SNIPPET_BINARY\": () => /* binding */ CHECK_NAN_SNIPPET_BINARY,\n/* harmony export */   \"CHECK_NAN_SNIPPET_BINARY_PACKED\": () => /* binding */ CHECK_NAN_SNIPPET_BINARY_PACKED,\n/* harmony export */   \"unaryKernelFunc\": () => /* binding */ unaryKernelFunc,\n/* harmony export */   \"binaryKernelFunc\": () => /* binding */ binaryKernelFunc,\n/* harmony export */   \"mapActivationToShaderProgram\": () => /* binding */ mapActivationToShaderProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernels/Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../kernels/LeakyRelu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js\");\n/* harmony import */ var _kernels_Prelu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernels/Prelu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\n\n\n\nconst CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nconst CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nconst CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nfunction unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nfunction binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(a.dtype, b.dtype);\n        if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, aData.values, bData.values, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_5__.BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nfunction mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.LINEAR;\n        }\n        return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.RELU;\n        }\n        return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ELU;\n        }\n        return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.RELU6;\n        }\n        return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return _kernels_Prelu__WEBPACK_IMPORTED_MODULE_6__.PRELU_PACKED;\n        }\n        return _kernels_Prelu__WEBPACK_IMPORTED_MODULE_6__.PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_7__.LEAKYRELU_PACKED;\n        }\n        return _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_7__.LEAKYRELU;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n//# sourceMappingURL=kernel_funcs_utils.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"reduce\": () => /* binding */ reduce\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _mean_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mean_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js\");\n/* harmony import */ var _reduce_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reduce_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n    const stages = [];\n    while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n        const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n        const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOptimalWindowSize(outSize);\n        stages.push({\n            inSize: outSize,\n            windowSize,\n            outSize: Math.ceil(outSize / windowSize)\n        });\n    }\n    return stages;\n}\nfunction reduce(x, dtype, reductionType, backend) {\n    const reductionStages = getReductionStages(x.shape);\n    let result = x;\n    for (let i = 0; i < reductionStages.length; i++) {\n        const { inSize, windowSize, outSize } = reductionStages[i];\n        let program;\n        let previousResult;\n        if (reductionType === 'mean') {\n            program = i === 0 ?\n                new _mean_gpu__WEBPACK_IMPORTED_MODULE_1__.MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) :\n                new _mean_gpu__WEBPACK_IMPORTED_MODULE_1__.MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });\n        }\n        else {\n            program = new _reduce_gpu__WEBPACK_IMPORTED_MODULE_2__.ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n        }\n        previousResult = result;\n        result = backend.runWebGLProgram(program, [result], dtype);\n        if (previousResult.dataId !== x.dataId) {\n            backend.disposeIntermediateTensorInfo(previousResult);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=reduce.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"packedReshape\": () => /* binding */ packedReshape\n/* harmony export */ });\n/* harmony import */ var _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reshape_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction packedReshape(input, afterShape, backend) {\n    const input3DShape = [(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getBatchDim)(input.shape),\n        ...(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getRowsCols)(input.shape)];\n    const input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n    };\n    const afterShapeAs3D = [(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getBatchDim)(afterShape),\n        ...(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getRowsCols)(afterShape)];\n    const program = new _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = backend.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\n//# sourceMappingURL=reshape.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addImplCPU\": () => /* binding */ addImplCPU,\n/* harmony export */   \"bincountImplCPU\": () => /* binding */ bincountImplCPU,\n/* harmony export */   \"bincountReduceImplCPU\": () => /* binding */ bincountReduceImplCPU,\n/* harmony export */   \"ceilImplCPU\": () => /* binding */ ceilImplCPU,\n/* harmony export */   \"concatImplCPU\": () => /* binding */ concatImplCPU,\n/* harmony export */   \"expImplCPU\": () => /* binding */ expImplCPU,\n/* harmony export */   \"expm1ImplCPU\": () => /* binding */ expm1ImplCPU,\n/* harmony export */   \"floorImplCPU\": () => /* binding */ floorImplCPU,\n/* harmony export */   \"gatherV2ImplCPU\": () => /* binding */ gatherV2ImplCPU,\n/* harmony export */   \"greaterImplCPU\": () => /* binding */ greaterImplCPU,\n/* harmony export */   \"lessImplCPU\": () => /* binding */ lessImplCPU,\n/* harmony export */   \"linSpaceImplCPU\": () => /* binding */ linSpaceImplCPU,\n/* harmony export */   \"logImplCPU\": () => /* binding */ logImplCPU,\n/* harmony export */   \"maxImplCPU\": () => /* binding */ maxImplCPU,\n/* harmony export */   \"maximumImplCPU\": () => /* binding */ maximumImplCPU,\n/* harmony export */   \"minimumImplCPU\": () => /* binding */ minimumImplCPU,\n/* harmony export */   \"multiplyImplCPU\": () => /* binding */ multiplyImplCPU,\n/* harmony export */   \"negImplCPU\": () => /* binding */ negImplCPU,\n/* harmony export */   \"prodImplCPU\": () => /* binding */ prodImplCPU,\n/* harmony export */   \"simpleAbsImplCPU\": () => /* binding */ simpleAbsImplCPU,\n/* harmony export */   \"sliceImplCPU\": () => /* binding */ sliceImplCPU,\n/* harmony export */   \"stridedSliceImplCPU\": () => /* binding */ stridedSliceImplCPU,\n/* harmony export */   \"subImplCPU\": () => /* binding */ subImplCPU,\n/* harmony export */   \"rangeImplCPU\": () => /* binding */ rangeImplCPU,\n/* harmony export */   \"rsqrtImplCPU\": () => /* binding */ rsqrtImplCPU,\n/* harmony export */   \"tileImplCPU\": () => /* binding */ tileImplCPU,\n/* harmony export */   \"topKImplCPU\": () => /* binding */ topKImplCPU,\n/* harmony export */   \"transposeImplCPU\": () => /* binding */ transposeImplCPU,\n/* harmony export */   \"uniqueImplCPU\": () => /* binding */ uniqueImplCPU\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_backend_cpu_dist_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-backend-cpu/dist/shared */ \"./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\n\nconst { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, lessImpl: lessImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, prodImpl: prodImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, stridedSliceImpl: stridedSliceImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU, } = _tensorflow_tfjs_backend_cpu_dist_shared__WEBPACK_IMPORTED_MODULE_0__;\n\n//# sourceMappingURL=shared.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"abs\": () => /* binding */ abs,\n/* harmony export */   \"absConfig\": () => /* binding */ absConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../unaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nconst ABS = `return abs(x);`;\nfunction abs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    // TODO: handle cases when x is complex. Once the cpu implementation\n    // can handle complex values, refactor to use unaryKernelFunc.\n    if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        const xData = backend.texData.get(x.dataId);\n        const outValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.simpleAbsImplCPU)(xData.values);\n        return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n    }\n    let program;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.UnaryOpPackedProgram(x.shape, ABS);\n    }\n    else {\n        program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.UnaryOpProgram(x.shape, ABS);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nconst absConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Abs,\n    backendName: 'webgl',\n    kernelFunc: abs\n};\n//# sourceMappingURL=Abs.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"acos\": () => /* binding */ acos,\n/* harmony export */   \"acosConfig\": () => /* binding */ acosConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ACOS = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\nconst acos = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: ACOS });\nconst acosConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acos,\n    backendName: 'webgl',\n    kernelFunc: acos,\n};\n//# sourceMappingURL=Acos.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"acosh\": () => /* binding */ acosh,\n/* harmony export */   \"acoshConfig\": () => /* binding */ acoshConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ACOSH = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\nconst acosh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: ACOSH });\nconst acoshConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acosh,\n    backendName: 'webgl',\n    kernelFunc: acosh,\n};\n//# sourceMappingURL=Acosh.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addKernelFunc\": () => /* binding */ addKernelFunc,\n/* harmony export */   \"addConfig\": () => /* binding */ addConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ADD = 'return a + b;';\nconst addKernelFunc = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({\n    opSnippet: ADD,\n    packedOpSnippet: ADD,\n    supportsComplex: true,\n    cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.addImplCPU\n});\nconst addConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add,\n    backendName: 'webgl',\n    kernelFunc: addKernelFunc\n};\n//# sourceMappingURL=Add.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addN\": () => /* binding */ addN,\n/* harmony export */   \"addNConfig\": () => /* binding */ addNConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _addn_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../addn_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js\");\n/* harmony import */ var _addn_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addn_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    if (tensors.length === 1) {\n        return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x: tensors[0] }, backend });\n    }\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(tensors.length / 2);\n        const leftSide = addN({ inputs: tensors.slice(0, midIndex), backend });\n        const rightSide = addN({ inputs: tensors.slice(midIndex), backend });\n        return addN({ inputs: [leftSide, rightSide], backend });\n    }\n    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new _addn_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.AddNPackedProgram(tensors[0].shape, shapes) :\n        new _addn_gpu__WEBPACK_IMPORTED_MODULE_3__.AddNProgram(tensors[0].shape, shapes);\n    return backend.runWebGLProgram(program, tensors, dtype);\n}\nconst addNConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AddN,\n    backendName: 'webgl',\n    kernelFunc: addN\n};\n//# sourceMappingURL=AddN.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"all\": () => /* binding */ all,\n/* harmony export */   \"allConfig\": () => /* binding */ allConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction all(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n    const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(a2D, a2D.dtype, 'all', backend);\n    let res;\n    if (keepDims) {\n        const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nconst allConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.All,\n    backendName: 'webgl',\n    kernelFunc: all\n};\n//# sourceMappingURL=All.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"any\": () => /* binding */ any,\n/* harmony export */   \"anyConfig\": () => /* binding */ anyConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction any(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n    const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(a2D, a2D.dtype, 'any', backend);\n    let res;\n    if (keepDims) {\n        const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nconst anyConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Any,\n    backendName: 'webgl',\n    kernelFunc: any\n};\n//# sourceMappingURL=Any.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"argMax\": () => /* binding */ argMax,\n/* harmony export */   \"argMaxConfig\": () => /* binding */ argMaxConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/arg_min_max */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction argMax(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n    const out = (0,_kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__.argMinMaxReduce)(backend, $x, axes[0], 'max');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nconst argMaxConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMax,\n    backendName: 'webgl',\n    kernelFunc: argMax\n};\n//# sourceMappingURL=ArgMax.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"argMin\": () => /* binding */ argMin,\n/* harmony export */   \"argMinConfig\": () => /* binding */ argMinConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/arg_min_max */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction argMin(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n    const out = (0,_kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__.argMinMaxReduce)(backend, $x, axes[0], 'min');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nconst argMinConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMin,\n    backendName: 'webgl',\n    kernelFunc: argMin\n};\n//# sourceMappingURL=ArgMin.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"asin\": () => /* binding */ asin,\n/* harmony export */   \"asinConfig\": () => /* binding */ asinConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ASIN = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\nconst asin = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: ASIN });\nconst asinConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asin,\n    backendName: 'webgl',\n    kernelFunc: asin,\n};\n//# sourceMappingURL=Asin.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"asinh\": () => /* binding */ asinh,\n/* harmony export */   \"asinhConfig\": () => /* binding */ asinhConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ASINH = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\nconst asinh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: ASINH });\nconst asinhConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asinh,\n    backendName: 'webgl',\n    kernelFunc: asinh,\n};\n//# sourceMappingURL=Asinh.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"atan\": () => /* binding */ atan,\n/* harmony export */   \"atanConfig\": () => /* binding */ atanConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ATAN = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\nconst atan = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: ATAN });\nconst atanConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan,\n    backendName: 'webgl',\n    kernelFunc: atan,\n};\n//# sourceMappingURL=Atan.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"atan2\": () => /* binding */ atan2,\n/* harmony export */   \"atan2Config\": () => /* binding */ atan2Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst ATAN2 = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\nconst atan2 = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED });\nconst atan2Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan2,\n    backendName: 'webgl',\n    kernelFunc: atan2,\n};\n//# sourceMappingURL=Atan2.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"atanh\": () => /* binding */ atanh,\n/* harmony export */   \"atanhConfig\": () => /* binding */ atanhConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ATANH = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\nconst atanh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: ATANH });\nconst atanhConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atanh,\n    backendName: 'webgl',\n    kernelFunc: atanh,\n};\n//# sourceMappingURL=Atanh.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"avgPool\": () => /* binding */ avgPool,\n/* harmony export */   \"avgPoolConfig\": () => /* binding */ avgPoolConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction avgPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'avgPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({ inputs: { x }, backend });\n    }\n    const avgPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_3__.Pool2DProgram(convInfo, 'avg', false);\n    return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nconst avgPoolConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool,\n    backendName: 'webgl',\n    kernelFunc: avgPool\n};\n//# sourceMappingURL=AvgPool.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"avgPool3D\": () => /* binding */ avgPool3D,\n/* harmony export */   \"avgPool3DConfig\": () => /* binding */ avgPool3DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    const avgPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_1__.Pool3DProgram(convInfo, 'avg', false);\n    return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nconst avgPool3DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3D,\n    backendName: 'webgl',\n    kernelFunc: avgPool3D\n};\n//# sourceMappingURL=AvgPool3D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"avgPool3DGrad\": () => /* binding */ avgPool3DGrad,\n/* harmony export */   \"avgPoolGrad3DConfig\": () => /* binding */ avgPoolGrad3DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../avg_pool_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction avgPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const avgPoolBackpropProgram = new _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.AvgPool3DBackpropProgram(convInfo);\n    return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nconst avgPoolGrad3DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: avgPool3DGrad\n};\n//# sourceMappingURL=AvgPool3DGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"avgPoolGrad\": () => /* binding */ avgPoolGrad,\n/* harmony export */   \"avgPoolGradConfig\": () => /* binding */ avgPoolGradConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../avg_pool_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction avgPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, input], 'avgPoolGrad');\n    const { filterSize, strides, pad } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n    const avgPoolBackpropProgram = new _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__.AvgPool2DBackpropProgram(convInfo);\n    return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nconst avgPoolGradConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: avgPoolGrad\n};\n//# sourceMappingURL=AvgPoolGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"batchMatMul\": () => /* binding */ batchMatMul,\n/* harmony export */   \"batchMatMulConfig\": () => /* binding */ batchMatMulConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchMatMul_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    return (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.batchMatMulImpl)({ a, b, transposeA, transposeB, backend });\n}\nconst batchMatMulConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchMatMul,\n    backendName: 'webgl',\n    kernelFunc: batchMatMul,\n};\n//# sourceMappingURL=BatchMatMul.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MATMUL_SHARED_DIM_THRESHOLD\": () => /* binding */ MATMUL_SHARED_DIM_THRESHOLD,\n/* harmony export */   \"batchMatMulImpl\": () => /* binding */ batchMatMulImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mulmat_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js\");\n/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Multiply */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nconst MATMUL_SHARED_DIM_THRESHOLD = 1000;\nfunction batchMatMulImpl({ a, b, transposeA, transposeB, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outerDimsA);\n    const batchDimB = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outerDimsB);\n    const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` +\n        `same or at least one input batch dimension must be 1. Got input ` +\n        `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n    const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ?\n        [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ?\n        [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const intermediates = [a3d, b3d];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation != null ?\n        (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.mapActivationToShaderProgram)(activation, true) :\n        null;\n    const containsFusedOps = hasBias || hasPreluActivationWeights ||\n        hasLeakyreluAlpha || fusedActivation != null;\n    let out;\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n        let aVec = a3d;\n        let bVec = b3d;\n        if (transposeA) {\n            aVec = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({ inputs: { x: a3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(aVec);\n        }\n        if (transposeB) {\n            bVec = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({ inputs: { x: b3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(bVec);\n        }\n        const shouldReshapeA = outerShapeB !== 1;\n        const shouldReshapeB = outerShapeB === 1;\n        let aVec3d = aVec;\n        if (shouldReshapeA) {\n            aVec3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({\n                inputs: { x: aVec },\n                backend,\n                attrs: { shape: [batchDim, sharedDim, 1] }\n            });\n            intermediates.push(aVec3d);\n        }\n        const axis = outerShapeB === 1 ? 2 : 1;\n        let bVec3d = bVec;\n        if (shouldReshapeB) {\n            bVec3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({\n                inputs: { x: bVec },\n                backend,\n                attrs: { shape: [batchDim, 1, sharedDim] }\n            });\n            intermediates.push(bVec3d);\n        }\n        const product = (0,_Multiply__WEBPACK_IMPORTED_MODULE_4__.multiply)({ inputs: { a: aVec3d, b: bVec3d }, backend });\n        out = (0,_Sum__WEBPACK_IMPORTED_MODULE_5__.sum)({ inputs: { x: product }, backend, attrs: { axis, keepDims: true } });\n        intermediates.push(product);\n    }\n    else {\n        const dtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(a.dtype, b.dtype);\n        const program = new _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_6__.MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [a3d, b3d];\n        if (bias != null) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: out }, backend, attrs: { shape: outShape } });\n    intermediates.push(out);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return outReshaped;\n}\n//# sourceMappingURL=BatchMatMul_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"batchNorm\": () => /* binding */ batchNorm,\n/* harmony export */   \"batchNormConfig\": () => /* binding */ batchNormConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _batchnorm_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../batchnorm_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js\");\n/* harmony import */ var _batchnorm_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../batchnorm_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new _batchnorm_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new _batchnorm_gpu__WEBPACK_IMPORTED_MODULE_2__.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nconst batchNormConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"batchToSpaceND\": () => /* binding */ batchToSpaceND,\n/* harmony export */   \"batchToSpaceNDConfig\": () => /* binding */ batchToSpaceNDConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Slice */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nconst batchToSpaceND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const toDispose = [];\n    const reshapedIntermediate = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const transposedIntermediate = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({ inputs: { x: reshapedIntermediate }, backend, attrs: { perm: permuted } });\n    const reshapedIntermediate2 = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({\n        inputs: { x: transposedIntermediate },\n        backend,\n        attrs: { shape: reshapedPermuted }\n    });\n    const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_3__.slice)({\n        inputs: { x: reshapedIntermediate2 },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    toDispose.push(reshapedIntermediate);\n    toDispose.push(transposedIntermediate);\n    toDispose.push(reshapedIntermediate2);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return sliced;\n};\nconst batchToSpaceNDConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchToSpaceND,\n    backendName: 'webgl',\n    kernelFunc: batchToSpaceND\n};\n//# sourceMappingURL=BatchToSpaceND.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bincount\": () => /* binding */ bincount,\n/* harmony export */   \"bincountConfig\": () => /* binding */ bincountConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction bincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size } = attrs;\n    const xVals = backend.texData.get(x.dataId).values;\n    const weightsVals = backend.texData.get(weights.dataId).values;\n    const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.bincountImplCPU)(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\nconst bincountConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Bincount,\n    backendName: 'webgl',\n    kernelFunc: bincount\n};\n//# sourceMappingURL=Bincount.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cast\": () => /* binding */ cast,\n/* harmony export */   \"castConfig\": () => /* binding */ castConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/* harmony import */ var _NotEqual__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NotEqual */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js\");\n/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Real */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js\");\n/* harmony import */ var _kernel_utils_int__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/int */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\nfunction cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x }, backend });\n        }\n        // TODO(annxingyuan): Import kernel function once zeros is modularized.\n        const zerosTensor = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(x.shape);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({ inputs: { real: floatX, imag: zerosTensor }, backend });\n        zerosTensor.dispose();\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_3__.real)({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        return (0,_kernel_utils_int__WEBPACK_IMPORTED_MODULE_4__.int)(x, backend);\n    }\n    if (dtype === 'bool') {\n        const zerosTensorInfo = backend.makeTensorInfo([], 'bool', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('bool', 1));\n        const binaryInputs = { a: x, b: zerosTensorInfo };\n        const result = (0,_NotEqual__WEBPACK_IMPORTED_MODULE_5__.notEqual)({ inputs: binaryInputs, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        return result;\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nconst castConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cast,\n    backendName: 'webgl',\n    kernelFunc: cast\n};\n//# sourceMappingURL=Cast.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ceil\": () => /* binding */ ceil,\n/* harmony export */   \"ceilConfig\": () => /* binding */ ceilConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst CEIL = `return ceil(x);`;\nconst ceil = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.ceilImplCPU });\nconst ceilConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil,\n    backendName: 'webgl',\n    kernelFunc: ceil\n};\n//# sourceMappingURL=Ceil.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clipByValue\": () => /* binding */ clipByValue,\n/* harmony export */   \"clipByValueConfig\": () => /* binding */ clipByValueConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _clip_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../clip_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js\");\n/* harmony import */ var _clip_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../clip_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction clipByValue(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { clipValueMin, clipValueMax } = attrs;\n    let program;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_CLIP')) {\n        program = new _clip_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ClipPackedProgram(x.shape);\n    }\n    else {\n        program = new _clip_gpu__WEBPACK_IMPORTED_MODULE_2__.ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(clipValueMin, clipValueMax);\n    return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n}\nconst clipByValueConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ClipByValue,\n    backendName: 'webgl',\n    kernelFunc: clipByValue\n};\n//# sourceMappingURL=ClipByValue.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"complex\": () => /* binding */ complex,\n/* harmony export */   \"complexConfig\": () => /* binding */ complexConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors increment the `complexParentRefCount` properties of the underlying\n * data buckets to prevent them from being disposed, as the engine's disposal\n * logic does not account for data sharing by complex tensors.\n *\n * When a complex tensor is disposed, it will explicitly decrease the\n * `complexParentRefCount` properties of its underlying components.\n */\nfunction complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.texData.get(complexInfo.dataId);\n    const realTensorInfo = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x: real }, backend });\n    const realData = backend.texData.get(realTensorInfo.dataId);\n    realData.complexParentRefCount++;\n    const imagTensorInfo = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x: imag }, backend });\n    const imagData = backend.texData.get(imagTensorInfo.dataId);\n    imagData.complexParentRefCount++;\n    complex.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };\n    return complexInfo;\n}\nconst complexConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Complex,\n    backendName: 'webgl',\n    kernelFunc: complex\n};\n//# sourceMappingURL=Complex.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"complexAbs\": () => /* binding */ complexAbs,\n/* harmony export */   \"complexAbsConfig\": () => /* binding */ complexAbsConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _complex_abs_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../complex_abs_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n    return {\n        dataId: complexPart.dataId,\n        dtype: complexPart.dtype,\n        shape: complexTensor.shape\n    };\n}\nfunction complexAbs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xData = backend.texData.get(x.dataId);\n    const program = new _complex_abs_gpu__WEBPACK_IMPORTED_MODULE_1__.ComplexAbsProgram(x.shape);\n    const programInputs = [\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n    ];\n    return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nconst complexAbsConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ComplexAbs,\n    backendName: 'webgl',\n    kernelFunc: complexAbs\n};\n//# sourceMappingURL=ComplexAbs.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"concat\": () => /* binding */ concat,\n/* harmony export */   \"concatConfig\": () => /* binding */ concatConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Concat_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Concat_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, inputs[0].shape)[0];\n    const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertParamsConsistent(shapes, $axis);\n    return (0,_Concat_impl__WEBPACK_IMPORTED_MODULE_2__.concatImpl)($inputs, $axis, backend);\n}\nconst concatConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Concat,\n    backendName: 'webgl',\n    kernelFunc: concat\n};\n//# sourceMappingURL=Concat.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"concatImpl\": () => /* binding */ concatImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _concat_gpu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../concat_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js\");\n/* harmony import */ var _concat_packed_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../concat_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js\");\n/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\n\nfunction concatImpl(inputs, axis, backend) {\n    const dtype = inputs[0].dtype;\n    if (dtype === 'complex64') {\n        const reals = inputs.map((t) => (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({ inputs: { input: t }, backend }));\n        const imags = inputs.map((t) => (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({ inputs: { input: t }, backend }));\n        const realConcated = concatImpl(reals, axis, backend);\n        const imagConcated = concatImpl(imags, axis, backend);\n        const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (dtype === 'string') {\n        const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n        const inputsValShapes = tensors2D.map(t => {\n            return { vals: backend.texData.get(t.dataId).values, shape: t.shape };\n        });\n        const simplyConcat = tensors2D[0].shape[0] === 1;\n        const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__.concatImplCPU)(inputsValShapes, outShape, dtype, simplyConcat);\n        const finalOutShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n        const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n        tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return outInfo;\n    }\n    if (inputs.length > (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(inputs.length / 2);\n        const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n        const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n        const result = concatImpl([leftSide, rightSide], axis, backend);\n        backend.disposeIntermediateTensorInfo(leftSide);\n        backend.disposeIntermediateTensorInfo(rightSide);\n        return result;\n    }\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n        inputs[0].shape.length > 1) {\n        const program = new _concat_packed_gpu__WEBPACK_IMPORTED_MODULE_5__.ConcatPackedProgram(inputs.map(t => t.shape), axis);\n        return backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n    const program = new _concat_gpu__WEBPACK_IMPORTED_MODULE_6__.ConcatProgram(tensors2D.map(t => t.shape));\n    const result = backend.runWebGLProgram(program, tensors2D, dtype);\n    tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    const reshapedResult = (0,_Reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)({ inputs: { x: result }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const tensors2D = inputs.map(x => (0,_Reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)({\n        inputs: { x },\n        attrs: { shape: [-1, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape.slice(axis))] },\n        backend\n    }));\n    return { tensors2D, outShape };\n}\n//# sourceMappingURL=Concat_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv2d\": () => /* binding */ conv2d,\n/* harmony export */   \"conv2DConfig\": () => /* binding */ conv2DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js\");\n/* harmony import */ var _Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conv2D_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction conv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__.conv2dByMatMul)({ x, filter, convInfo, backend });\n    }\n    else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__.conv2dWithIm2Row)({ x, filter, convInfo, backend });\n    }\n    else {\n        const program = new _conv_gpu__WEBPACK_IMPORTED_MODULE_2__.Conv2DProgram(convInfo);\n        out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    }\n    const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nconst conv2DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2D,\n    backendName: 'webgl',\n    kernelFunc: conv2d,\n};\n//# sourceMappingURL=Conv2D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv2DBackpropFilter\": () => /* binding */ conv2DBackpropFilter,\n/* harmony export */   \"conv2DBackpropFilterConfig\": () => /* binding */ conv2DBackpropFilterConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction conv2DBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;\n    const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv2DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nconst conv2DBackpropFilterConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropFilter,\n    backendName: 'webgl',\n    kernelFunc: conv2DBackpropFilter,\n};\n//# sourceMappingURL=Conv2DBackpropFilter.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv2DBackpropInput\": () => /* binding */ conv2DBackpropInput,\n/* harmony export */   \"conv2DBackpropInputConfig\": () => /* binding */ conv2DBackpropInputConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nconst conv2DBackpropInputConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropInput,\n    backendName: 'webgl',\n    kernelFunc: conv2DBackpropInput,\n};\n//# sourceMappingURL=Conv2DBackpropInput.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv2dByMatMul\": () => /* binding */ conv2dByMatMul,\n/* harmony export */   \"conv2dWithIm2Row\": () => /* binding */ conv2dWithIm2Row\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _im2col_packed_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../im2col_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mulmat_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/* harmony import */ var _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchMatMul_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nfunction conv2dByMatMul({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = backend.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n    let out;\n    const intermediates = [];\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n    if (batchMatMulWillBeUnpacked || !(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_LAZILY_UNPACK') ||\n        !(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n        const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n            xShape[0] * xShape[2] * xShape[3];\n        const xReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({\n            inputs: { x },\n            backend,\n            attrs: { shape: [1, targetShape, convInfo.inChannels] }\n        });\n        const filterReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        const result = (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.batchMatMulImpl)({\n            a: xReshaped,\n            b: filterReshaped,\n            transposeA,\n            transposeB,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: result }, backend, attrs: { shape: convInfo.outShape } });\n        intermediates.push(xReshaped);\n        intermediates.push(filterReshaped);\n        intermediates.push(result);\n    }\n    else {\n        // Following optimization is specific to packed |x| with odd row count\n        // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n        // we avoid expensive packed 2x2 reshape by padding row count to next,\n        // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n        // even-rows tensor before the operation and, after the batchMatMul,\n        // fix the even-rows result to have odd number of rows.\n        const targetShape = isChannelsLast ?\n            xShape[0] * xShape[1] * (xShape[2] + 1) :\n            xShape[0] * xShape[2] * (xShape[3] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing row count, after batchMatMul->...->compileProgram leads to\n        // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even row count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_webgl_util__WEBPACK_IMPORTED_MODULE_3__.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        intermediates.push(filterReshaped);\n        const pointwiseConv = (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.batchMatMulImpl)({\n            a: xReshaped,\n            b: filterReshaped,\n            backend,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        out = (0,_Identity__WEBPACK_IMPORTED_MODULE_4__.identity)({ inputs: { x: pointwiseConv }, backend });\n        out.shape = convInfo.outShape;\n        intermediates.push(pointwiseConv);\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nfunction conv2dWithIm2Row({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n    const intermediates = [];\n    const xSqueezed = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x }, backend, attrs: { shape: x.shape.slice(1) } });\n    const w2Row = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({\n        inputs: { x: filter },\n        backend,\n        attrs: { shape: [1, sharedDim, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(filter.shape) / sharedDim] }\n    });\n    intermediates.push(xSqueezed);\n    intermediates.push(w2Row);\n    const im2ColProgram = new _im2col_packed_gpu__WEBPACK_IMPORTED_MODULE_5__.Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');\n    const im2ColReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({\n        inputs: { x: im2Col },\n        backend,\n        attrs: { shape: [1, x2ColShape[0], x2ColShape[1]] }\n    });\n    intermediates.push(im2Col);\n    intermediates.push(im2ColReshaped);\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_6__.mapActivationToShaderProgram)(activation, true) : null;\n    const matmulProgram = new _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_7__.MatMulPackedProgram(im2ColReshaped.shape, w2Row.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [im2ColReshaped, w2Row];\n    if (bias) {\n        inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));\n        inputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n    const outShape = isChannelsLast ?\n        [1, outHeight, outWidth, convInfo.outChannels] :\n        [1, convInfo.outChannels, outHeight, outWidth];\n    const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: product }, backend, attrs: { shape: outShape } });\n    intermediates.push(product);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n//# sourceMappingURL=Conv2D_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv3D\": () => /* binding */ conv3D,\n/* harmony export */   \"conv3DConfig\": () => /* binding */ conv3DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const program = new _conv_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv3DProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nconst conv3DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3D,\n    backendName: 'webgl',\n    kernelFunc: conv3D,\n};\n//# sourceMappingURL=Conv3D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv3DBackpropFilterV2\": () => /* binding */ conv3DBackpropFilterV2,\n/* harmony export */   \"conv3DBackpropFilterV2Config\": () => /* binding */ conv3DBackpropFilterV2Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction conv3DBackpropFilterV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, filterShape } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n    const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv3DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nconst conv3DBackpropFilterV2Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropFilterV2,\n    backendName: 'webgl',\n    kernelFunc: conv3DBackpropFilterV2\n};\n//# sourceMappingURL=Conv3DBackpropFilterV2.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conv3DBackpropInput\": () => /* binding */ conv3DBackpropInput,\n/* harmony export */   \"conv3DBackpropInputConfig\": () => /* binding */ conv3DBackpropInputConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction conv3DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv3DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nconst conv3DBackpropInputConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropInputV2,\n    backendName: 'webgl',\n    kernelFunc: conv3DBackpropInput,\n};\n//# sourceMappingURL=Conv3DBackpropInputV2.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cos\": () => /* binding */ cos,\n/* harmony export */   \"cosConfig\": () => /* binding */ cosConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst COS = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\nconst cos = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: COS });\nconst cosConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cos,\n    backendName: 'webgl',\n    kernelFunc: cos,\n};\n//# sourceMappingURL=Cos.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cosh\": () => /* binding */ cosh,\n/* harmony export */   \"coshConfig\": () => /* binding */ coshConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nconst cosh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: COSH });\nconst coshConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cosh,\n    backendName: 'webgl',\n    kernelFunc: cosh,\n};\n//# sourceMappingURL=Cosh.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cropAndResize\": () => /* binding */ cropAndResize,\n/* harmony export */   \"cropAndResizeConfig\": () => /* binding */ cropAndResizeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _crop_and_resize_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crop_and_resize_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst cropAndResize = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const program = new _crop_and_resize_gpu__WEBPACK_IMPORTED_MODULE_1__.CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\nconst cropAndResizeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.CropAndResize,\n    backendName: 'webgl',\n    kernelFunc: cropAndResize\n};\n//# sourceMappingURL=CropAndResize.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cumsum\": () => /* binding */ cumsum,\n/* harmony export */   \"cumsumConfig\": () => /* binding */ cumsumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _cumsum_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cumsum_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    const xRank = x.shape.length;\n    const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(1, xRank)[0];\n    if (permutedAxis !== xRank - 1) {\n        throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} ` +\n            `but got axis=${axis}`);\n    }\n    const size = x.shape[permutedAxis];\n    let result = (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({ inputs: { x: permutedX }, backend });\n    // Use cumsum parallel algorithm, ref:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n        const program = new _cumsum_gpu__WEBPACK_IMPORTED_MODULE_3__.CumSumProgram(permutedX.shape, false, reverse);\n        const customSetup = program.getCustomSetupFunc(i);\n        const prevResult = result;\n        result =\n            backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    // For exclusive cumsum, shift the end result in the direction of sum\n    // and add 0 to the front index.\n    if (exclusive) {\n        const program = new _cumsum_gpu__WEBPACK_IMPORTED_MODULE_3__.CumSumProgram(permutedX.shape, exclusive, reverse);\n        const prevResult = result;\n        result = backend.runWebGLProgram(program, [result], result.dtype);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    if (permutation != null) {\n        const reversePermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo(permutedX);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nconst cumsumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumsum,\n    backendName: 'webgl',\n    kernelFunc: cumsum\n};\n//# sourceMappingURL=Cumsum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"denseBincount\": () => /* binding */ denseBincount,\n/* harmony export */   \"denseBincountConfig\": () => /* binding */ denseBincountConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.texData.get(x.dataId).values;\n        const weightsVals = backend.texData.get(weights.dataId).values;\n        const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.bincountImplCPU)(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.bincountReduceImplCPU)(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nconst denseBincountConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DenseBincount,\n    backendName: 'webgl',\n    kernelFunc: denseBincount\n};\n//# sourceMappingURL=DenseBincount.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"depthToSpace\": () => /* binding */ depthToSpace,\n/* harmony export */   \"depthToSpaceConfig\": () => /* binding */ depthToSpaceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _depth_to_space_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../depth_to_space_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n    const program = new _depth_to_space_gpu__WEBPACK_IMPORTED_MODULE_1__.DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nconst depthToSpaceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthToSpace,\n    backendName: 'webgl',\n    kernelFunc: depthToSpace\n};\n//# sourceMappingURL=DepthToSpace.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"depthwiseConv2dNative\": () => /* binding */ depthwiseConv2dNative,\n/* harmony export */   \"depthwiseConv2dNativeConfig\": () => /* binding */ depthwiseConv2dNativeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js\");\n/* harmony import */ var _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_packed_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    let program;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n        program = new _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConvPacked2DProgram(convInfo);\n    }\n    else {\n        program = new _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__.DepthwiseConv2DProgram(convInfo);\n    }\n    return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nconst depthwiseConv2dNativeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNative,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNative,\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"depthwiseConv2dNativeBackpropFilter\": () => /* binding */ depthwiseConv2dNativeBackpropFilter,\n/* harmony export */   \"depthwiseConv2dNativeBackpropFilterConfig\": () => /* binding */ depthwiseConv2dNativeBackpropFilterConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction depthwiseConv2dNativeBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const program = new _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nconst depthwiseConv2dNativeBackpropFilterConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropFilter,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropFilter.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"depthwiseConv2dNativeBackpropInput\": () => /* binding */ depthwiseConv2dNativeBackpropInput,\n/* harmony export */   \"depthwiseConv2dNativeBackpropInputConfig\": () => /* binding */ depthwiseConv2dNativeBackpropInputConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const program = new _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nconst depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropInput,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropInput.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"diag\": () => /* binding */ diag,\n/* harmony export */   \"diagConfig\": () => /* binding */ diagConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _diag_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../diag_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction diag(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const outShape = [...x.shape, ...x.shape];\n    const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n    const flat = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x }, backend, attrs: { shape: [xSize] } });\n    const program = new _diag_gpu__WEBPACK_IMPORTED_MODULE_2__.DiagProgram(xSize);\n    const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n    const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: res }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(flat);\n    backend.disposeIntermediateTensorInfo(res);\n    return out;\n}\nconst diagConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Diag,\n    backendName: 'webgl',\n    kernelFunc: diag\n};\n//# sourceMappingURL=Diag.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dilation2D\": () => /* binding */ dilation2D,\n/* harmony export */   \"dilation2DConfig\": () => /* binding */ dilation2DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _dilation_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dilation_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction dilation2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n    let out;\n    const program = new _dilation_gpu__WEBPACK_IMPORTED_MODULE_1__.Dilation2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nconst dilation2DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2D,\n    backendName: 'webgl',\n    kernelFunc: dilation2D,\n};\n//# sourceMappingURL=Dilation2D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eluConfig\": () => /* binding */ eluConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nconst elu = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: ELU, packedOpSnippet: ELU_PACKED });\nconst eluConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Elu,\n    backendName: 'webgl',\n    kernelFunc: elu\n};\n//# sourceMappingURL=Elu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eluGrad\": () => /* binding */ eluGrad,\n/* harmony export */   \"eluGradConfig\": () => /* binding */ eluGradConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nconst eluGrad = (args) => {\n    const { inputs, backend } = args;\n    const { dy, y } = inputs;\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n        new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n    return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n};\nconst eluGradConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.EluGrad,\n    backendName: 'webgl',\n    kernelFunc: eluGrad\n};\n//# sourceMappingURL=EluGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"equal\": () => /* binding */ equal,\n/* harmony export */   \"equalConfig\": () => /* binding */ equalConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\nconst EQUAL = `return float(a == b);`;\nconst equal = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: EQUAL, packedOpSnippet: PACKED_EQUAL, dtype: 'bool' });\nconst equalConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Equal,\n    backendName: 'webgl',\n    kernelFunc: equal\n};\n//# sourceMappingURL=Equal.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"erf\": () => /* binding */ erf,\n/* harmony export */   \"erfConfig\": () => /* binding */ erfConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_P};\n  float a1 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A1};\n  float a2 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A2};\n  float a3 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A3};\n  float a4 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A4};\n  float a5 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\nconst erf = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: ERF });\nconst erfConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Erf,\n    backendName: 'webgl',\n    kernelFunc: erf,\n};\n//# sourceMappingURL=Erf.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EXP\": () => /* binding */ EXP,\n/* harmony export */   \"exp\": () => /* binding */ exp,\n/* harmony export */   \"expConfig\": () => /* binding */ expConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst EXP = `return exp(x);`;\nconst exp = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: EXP, packedOpSnippet: EXP, cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.expImplCPU });\nconst expConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp,\n    backendName: 'webgl',\n    kernelFunc: exp\n};\n//# sourceMappingURL=Exp.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"expandDims\": () => /* binding */ expandDims,\n/* harmony export */   \"expandDimsConfig\": () => /* binding */ expandDimsConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction expandDims(args) {\n    const { inputs, attrs, backend } = args;\n    const { dim } = attrs;\n    const { input } = inputs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nconst expandDimsConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ExpandDims,\n    backendName: 'webgl',\n    kernelFunc: expandDims,\n};\n//# sourceMappingURL=ExpandDims.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"expm1\": () => /* binding */ expm1,\n/* harmony export */   \"expm1Config\": () => /* binding */ expm1Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst EXPM1 = `return exp(x) - 1.0;`;\nconst expm1 = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.expm1ImplCPU });\nconst expm1Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1,\n    backendName: 'webgl',\n    kernelFunc: expm1\n};\n//# sourceMappingURL=Expm1.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fft\": () => /* binding */ fft,\n/* harmony export */   \"fftConfig\": () => /* binding */ fftConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _FFT_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FFT_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction fft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    return (0,_FFT_impl__WEBPACK_IMPORTED_MODULE_1__.fftImpl)(input, false /* inverse */, backend);\n}\nconst fftConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FFT,\n    backendName: 'webgl',\n    kernelFunc: fft\n};\n//# sourceMappingURL=FFT.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fftImpl\": () => /* binding */ fftImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _fft_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../fft_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction fftImpl(x, inverse, backend) {\n    const xData = backend.texData.get(x.dataId);\n    const inputSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = x.shape[x.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });\n    const xShape = input2D.shape;\n    const realProgram = new _fft_gpu__WEBPACK_IMPORTED_MODULE_2__.FFTProgram('real', xShape, inverse);\n    const imagProgram = new _fft_gpu__WEBPACK_IMPORTED_MODULE_2__.FFTProgram('imag', xShape, inverse);\n    const inputs = [\n        {\n            dataId: xData.complexTensorInfos.real.dataId,\n            dtype: xData.complexTensorInfos.real.dtype,\n            shape: xShape\n        },\n        {\n            dataId: xData.complexTensorInfos.imag.dataId,\n            dtype: xData.complexTensorInfos.imag.dtype,\n            shape: xShape\n        }\n    ];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({ inputs: { real: realPart, imag: imagPart }, backend });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    const complexOutputReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });\n    backend.disposeIntermediateTensorInfo(complexOutputReshaped);\n    return complexOutputReshaped;\n}\n//# sourceMappingURL=FFT_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fill\": () => /* binding */ fill,\n/* harmony export */   \"fillConfig\": () => /* binding */ fillConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _fill_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fill_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction fill(args) {\n    const { backend, attrs } = args;\n    const { shape, value } = attrs;\n    let { dtype } = attrs;\n    dtype = dtype || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.inferDtype(value);\n    if (dtype === 'string') {\n        // String type should be handled in CPU memory.\n        const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape));\n        values.fill(value);\n        return backend.makeTensorInfo(shape, dtype, values);\n    }\n    else {\n        const program = new _fill_gpu__WEBPACK_IMPORTED_MODULE_1__.FillProgram(shape, value);\n        const customSetup = program.getCustomSetupFunc(value);\n        return backend.runWebGLProgram(program, [], dtype, customSetup);\n    }\n}\nconst fillConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Fill,\n    backendName: 'webgl',\n    kernelFunc: fill\n};\n//# sourceMappingURL=Fill.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"flipLeftRightConfig\": () => /* binding */ flipLeftRightConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _flip_left_right_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../flip_left_right_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst flipLeftRightConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FlipLeftRight,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { image } = inputs;\n        const webglBackend = backend;\n        const program = new _flip_left_right_gpu__WEBPACK_IMPORTED_MODULE_1__.FlipLeftRightProgram(image.shape);\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n        return output;\n    }\n};\n//# sourceMappingURL=FlipLeftRight.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"floor\": () => /* binding */ floor,\n/* harmony export */   \"floorConfig\": () => /* binding */ floorConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst FLOOR = `return floor(x);`;\nconst floor = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.floorImplCPU });\nconst floorConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor,\n    backendName: 'webgl',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"floorDiv\": () => /* binding */ floorDiv,\n/* harmony export */   \"floorDivConfig\": () => /* binding */ floorDivConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\nconst floorDiv = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32' });\nconst floorDivConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FloorDiv,\n    backendName: 'webgl',\n    kernelFunc: floorDiv\n};\n//# sourceMappingURL=FloorDiv.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromPixelsConfig\": () => /* binding */ fromPixelsConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/* harmony import */ var _FromPixels_utils_from_pixels_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FromPixels_utils/from_pixels_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js\");\n/* harmony import */ var _FromPixels_utils_from_pixels_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FromPixels_utils/from_pixels_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nconst fromPixelsConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK') ?\n        new _FromPixels_utils_from_pixels_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.FromPixelsPackedProgram(outShape) :\n        new _FromPixels_utils_from_pixels_gpu__WEBPACK_IMPORTED_MODULE_3__.FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n//# sourceMappingURL=FromPixels.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FromPixelsProgram\": () => /* binding */ FromPixelsProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass FromPixelsProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=from_pixels_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FromPixelsPackedProgram\": () => /* binding */ FromPixelsPackedProgram\n/* harmony export */ });\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass FromPixelsPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=from_pixels_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fusedConv2d\": () => /* binding */ fusedConv2d,\n/* harmony export */   \"fusedConv2DConfig\": () => /* binding */ fusedConv2DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../conv_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conv2D_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nfunction fusedConv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    const intermediates = [];\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__.conv2dByMatMul)({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__.conv2dWithIm2Row)({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else {\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const hasLeakyreluAlpha = activation === 'leakyrelu';\n        const fusedActivation = activation ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.mapActivationToShaderProgram)(activation, false) : null;\n        const program = new _conv_gpu__WEBPACK_IMPORTED_MODULE_3__.Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [x, filter];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, 'float32');\n    }\n    const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    intermediates.push(out);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outReshaped;\n}\nconst fusedConv2DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedConv2d,\n};\n//# sourceMappingURL=FusedConv2D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fusedDepthwiseConv2D\": () => /* binding */ fusedDepthwiseConv2D,\n/* harmony export */   \"fusedDepthwiseConv2DConfig\": () => /* binding */ fusedDepthwiseConv2DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../conv_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js\");\n/* harmony import */ var _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_packed_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const intermediates = [];\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const shouldPackDepthwiseConv = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.mapActivationToShaderProgram)(activation, shouldPackDepthwiseConv) :\n        null;\n    const programInputs = [x, filter];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    if (hasBias) {\n        programInputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        programInputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));\n        programInputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    let program;\n    if (shouldPackDepthwiseConv) {\n        program = new _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__.DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    else {\n        program = new _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_3__.DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    const result = backend.runWebGLProgram(program, programInputs, 'float32');\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nconst fusedDepthwiseConv2DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedDepthwiseConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedDepthwiseConv2D,\n};\n//# sourceMappingURL=FusedDepthwiseConv2D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherNd\": () => /* binding */ gatherNd,\n/* harmony export */   \"gatherNdConfig\": () => /* binding */ gatherNdConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _gather_nd_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gather_nd_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.prepareAndValidate(params, indices);\n    const flattenIndices = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: indices }, backend, attrs: { shape: [numSlices, sliceRank] } });\n    const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({\n        inputs: { x: params },\n        backend,\n        attrs: { shape: [(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(params.shape) / sliceSize), sliceSize] }\n    });\n    const program = new _gather_nd_gpu__WEBPACK_IMPORTED_MODULE_2__.GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: res }, backend, attrs: { shape: resultShape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nconst gatherNdConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherNd,\n    backendName: 'webgl',\n    kernelFunc: gatherNd\n};\n//# sourceMappingURL=GatherNd.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherV2\": () => /* binding */ gatherV2,\n/* harmony export */   \"gatherV2Config\": () => /* binding */ gatherV2Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _gather_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gather_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    const parsedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape)[0];\n    const shapeInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n    const indicesSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(indices.shape);\n    const toDispose = [];\n    const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    toDispose.push(flattenX);\n    toDispose.push(flattenIndex);\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(flattenIndex);\n        const xBuf = backend.bufferSync(flattenX);\n        const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.gatherV2ImplCPU)(xBuf, indicesBuf, flattenOutputShape);\n        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new _gather_gpu__WEBPACK_IMPORTED_MODULE_3__.GatherProgram(flattenX.shape, flattenOutputShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n    toDispose.push(res);\n    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: res }, backend, attrs: { shape: shapeInfo.outputShape } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n}\nconst gatherV2Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherV2,\n    backendName: 'webgl',\n    kernelFunc: gatherV2\n};\n//# sourceMappingURL=GatherV2.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"greater\": () => /* binding */ greater,\n/* harmony export */   \"greaterConfig\": () => /* binding */ greaterConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\nconst greater = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({\n    opSnippet: GREATER,\n    packedOpSnippet: GREATER_PACKED,\n    cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.greaterImplCPU,\n    dtype: 'bool'\n});\nconst greaterConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater,\n    backendName: 'webgl',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"greaterEqual\": () => /* binding */ greaterEqual,\n/* harmony export */   \"greaterEqualConfig\": () => /* binding */ greaterEqualConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\nconst greaterEqual = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({\n    opSnippet: GREATER_EQUAL,\n    packedOpSnippet: GREATER_EQUAL_PACKED,\n    dtype: 'bool'\n});\nconst greaterEqualConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual,\n    backendName: 'webgl',\n    kernelFunc: greaterEqual\n};\n//# sourceMappingURL=GreaterEqual.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ifft\": () => /* binding */ ifft,\n/* harmony export */   \"ifftConfig\": () => /* binding */ ifftConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _FFT_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FFT_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction ifft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    return (0,_FFT_impl__WEBPACK_IMPORTED_MODULE_1__.fftImpl)(input, true /* inverse */, backend);\n}\nconst ifftConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IFFT,\n    backendName: 'webgl',\n    kernelFunc: ifft\n};\n//# sourceMappingURL=IFFT.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"identity\": () => /* binding */ identity,\n/* harmony export */   \"identityConfig\": () => /* binding */ identityConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nconst identityConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Identity,\n    backendName: 'webgl',\n    kernelFunc: identity\n};\n//# sourceMappingURL=Identity.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"imag\": () => /* binding */ imag,\n/* harmony export */   \"imagConfig\": () => /* binding */ imagConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction imag(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputData = backend.texData.get(input.dataId);\n    return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x: inputData.complexTensorInfos.imag }, backend });\n}\nconst imagConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Imag,\n    backendName: 'webgl',\n    kernelFunc: imag\n};\n//# sourceMappingURL=Imag.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isFinite\": () => /* binding */ isFinite,\n/* harmony export */   \"isFiniteConfig\": () => /* binding */ isFiniteConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\nconst isFinite = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: IS_FINITE, dtype: 'bool' });\nconst isFiniteConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsFinite,\n    backendName: 'webgl',\n    kernelFunc: isFinite,\n};\n//# sourceMappingURL=IsFinite.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isInf\": () => /* binding */ isInf,\n/* harmony export */   \"isInfConfig\": () => /* binding */ isInfConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst IS_INF = `return float(isinf(x));`;\nconst isInf = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: IS_INF, dtype: 'bool' });\nconst isInfConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsInf,\n    backendName: 'webgl',\n    kernelFunc: isInf,\n};\n//# sourceMappingURL=IsInf.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isNaN\": () => /* binding */ isNaN,\n/* harmony export */   \"isNaNConfig\": () => /* binding */ isNaNConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst IS_NAN = `return float(isnan(x));`;\nconst isNaN = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: IS_NAN, dtype: 'bool' });\nconst isNaNConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsNan,\n    backendName: 'webgl',\n    kernelFunc: isNaN,\n};\n//# sourceMappingURL=IsNaN.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lrn\": () => /* binding */ lrn,\n/* harmony export */   \"LRNConfig\": () => /* binding */ LRNConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _lrn_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lrn_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js\");\n/* harmony import */ var _lrn_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lrn_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst lrn = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new _lrn_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n        new _lrn_gpu__WEBPACK_IMPORTED_MODULE_2__.LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nconst LRNConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRN,\n    backendName: 'webgl',\n    kernelFunc: lrn\n};\n//# sourceMappingURL=LRN.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lrnGrad\": () => /* binding */ lrnGrad,\n/* harmony export */   \"LRNGradConfig\": () => /* binding */ LRNGradConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _lrn_grad_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lrn_grad_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst lrnGrad = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x, y, dy } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    const program = new _lrn_grad_gpu__WEBPACK_IMPORTED_MODULE_1__.LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n    return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nconst LRNGradConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRNGrad,\n    backendName: 'webgl',\n    kernelFunc: lrnGrad\n};\n//# sourceMappingURL=LRNGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LEAKYRELU\": () => /* binding */ LEAKYRELU,\n/* harmony export */   \"LEAKYRELU_PACKED\": () => /* binding */ LEAKYRELU_PACKED,\n/* harmony export */   \"leakyRelu\": () => /* binding */ leakyRelu,\n/* harmony export */   \"leakyReluConfig\": () => /* binding */ leakyReluConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nconst LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nfunction leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    const $alpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(alpha, 'float32'));\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n        new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n    const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n    backend.disposeIntermediateTensorInfo($alpha);\n    return result;\n}\nconst leakyReluConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LeakyRelu,\n    backendName: 'webgl',\n    kernelFunc: leakyRelu\n};\n//# sourceMappingURL=LeakyRelu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"less\": () => /* binding */ less,\n/* harmony export */   \"lessConfig\": () => /* binding */ lessConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\nconst less = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({\n    opSnippet: LESS,\n    packedOpSnippet: LESS_PACKED,\n    cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.lessImplCPU,\n    dtype: 'bool'\n});\nconst lessConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less,\n    backendName: 'webgl',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LESS_EQUAL\": () => /* binding */ LESS_EQUAL,\n/* harmony export */   \"LESS_EQUAL_PACKED\": () => /* binding */ LESS_EQUAL_PACKED,\n/* harmony export */   \"lessEqual\": () => /* binding */ lessEqual,\n/* harmony export */   \"lessEqualConfig\": () => /* binding */ lessEqualConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst LESS_EQUAL = `return float(a <= b);`;\nconst LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\nconst lessEqual = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: LESS_EQUAL, packedOpSnippet: LESS_EQUAL_PACKED, dtype: 'bool' });\nconst lessEqualConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LessEqual,\n    backendName: 'webgl',\n    kernelFunc: lessEqual\n};\n//# sourceMappingURL=LessEqual.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"linSpace\": () => /* binding */ linSpace,\n/* harmony export */   \"linSpaceConfig\": () => /* binding */ linSpaceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction linSpace(args) {\n    const { backend, attrs } = args;\n    const { start, stop, num } = attrs;\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.linSpaceImplCPU)(start, stop, num);\n    return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\nconst linSpaceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LinSpace,\n    backendName: 'webgl',\n    kernelFunc: linSpace\n};\n//# sourceMappingURL=LinSpace.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"log\": () => /* binding */ log,\n/* harmony export */   \"logConfig\": () => /* binding */ logConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\nconst log = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.logImplCPU });\nconst logConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log,\n    backendName: 'webgl',\n    kernelFunc: log\n};\n//# sourceMappingURL=Log.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"log1p\": () => /* binding */ log1p,\n/* harmony export */   \"log1pConfig\": () => /* binding */ log1pConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst LOG1P = `return log(1.0 + x);`;\nconst log1p = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: LOG1P });\nconst log1pConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log1p,\n    backendName: 'webgl',\n    kernelFunc: log1p,\n};\n//# sourceMappingURL=Log1p.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"logicalAnd\": () => /* binding */ logicalAnd,\n/* harmony export */   \"logicalAndConfig\": () => /* binding */ logicalAndConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\nconst logicalAnd = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({\n    opSnippet: LOGICAL_AND,\n    packedOpSnippet: LOGICAL_AND_PACKED,\n    dtype: 'bool'\n});\nconst logicalAndConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalAnd,\n    backendName: 'webgl',\n    kernelFunc: logicalAnd\n};\n//# sourceMappingURL=LogicalAnd.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"logicalNot\": () => /* binding */ logicalNot,\n/* harmony export */   \"logicalNotConfig\": () => /* binding */ logicalNotConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\nconst logicalNot = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: LOGICAL_NOT });\nconst logicalNotConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalNot,\n    backendName: 'webgl',\n    kernelFunc: logicalNot,\n};\n//# sourceMappingURL=LogicalNot.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"logicalOr\": () => /* binding */ logicalOr,\n/* harmony export */   \"logicalOrConfig\": () => /* binding */ logicalOrConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\nconst logicalOr = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool' });\nconst logicalOrConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalOr,\n    backendName: 'webgl',\n    kernelFunc: logicalOr\n};\n//# sourceMappingURL=LogicalOr.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"max\": () => /* binding */ max,\n/* harmony export */   \"maxConfig\": () => /* binding */ maxConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _Max_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Max_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nfunction max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n        if (shouldExecuteOnCPU) {\n            const xTexData = backend.texData.get(maxInput.dataId);\n            const values = xTexData.values;\n            const newShape = new Array(xRank);\n            for (let i = 0; i < newShape.length; i++) {\n                newShape[i] = x.shape[permutedAxes[i]];\n            }\n            const maxInputValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);\n            maxInput = backend.makeTensorInfo(newShape, x.dtype);\n            const maxInputData = backend.texData.get(maxInput.dataId);\n            maxInputData.values = maxInputValues;\n        }\n        else {\n            maxInput = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(x, permutedAxes, backend);\n        }\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n    let out;\n    if (shouldExecuteOnCPU) {\n        const xTexData = backend.texData.get(maxInput.dataId);\n        const values = xTexData.values;\n        const outValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.maxImplCPU)(values, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape), outShape, x.dtype);\n        out = backend.makeTensorInfo(outShape, x.dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = (0,_Max_impl__WEBPACK_IMPORTED_MODULE_3__.maxImpl)(maxInput, reduceShape, outShape, backend);\n    }\n    if (maxInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(maxInput);\n    }\n    return out;\n}\nconst maxConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Max,\n    backendName: 'webgl',\n    kernelFunc: max\n};\n//# sourceMappingURL=Max.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxPool\": () => /* binding */ maxPool,\n/* harmony export */   \"maxPoolConfig\": () => /* binding */ maxPoolConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({ inputs: { x }, backend });\n    }\n    const maxPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_3__.Pool2DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nconst maxPoolConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool,\n    backendName: 'webgl',\n    kernelFunc: maxPool\n};\n//# sourceMappingURL=MaxPool.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxPool3d\": () => /* binding */ maxPool3d,\n/* harmony export */   \"maxPool3DConfig\": () => /* binding */ maxPool3DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction maxPool3d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    const maxPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_1__.Pool3DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nconst maxPool3DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3D,\n    backendName: 'webgl',\n    kernelFunc: maxPool3d\n};\n//# sourceMappingURL=MaxPool3D.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxPool3DGrad\": () => /* binding */ maxPool3DGrad,\n/* harmony export */   \"maxPoolGrad3DConfig\": () => /* binding */ maxPoolGrad3DConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../max_pool_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js\");\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const maxPool3dPositionsProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_1__.Pool3DProgram(convInfo, 'max', true /* get positions */);\n    const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n    const maxPoolBackpropProgram = new _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__.MaxPool3DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n    return result;\n}\nconst maxPoolGrad3DConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPool3DGrad\n};\n//# sourceMappingURL=MaxPool3DGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxPoolGrad\": () => /* binding */ maxPoolGrad,\n/* harmony export */   \"maxPoolGradConfig\": () => /* binding */ maxPoolGradConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../max_pool_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js\");\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const getPositions = true;\n    const maxPoolPositionsProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_2__.Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n    const maxPoolBackPropProgram = new _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_3__.MaxPool2DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPoolPositions);\n    return result;\n}\nconst maxPoolGradConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPoolGrad\n};\n//# sourceMappingURL=MaxPoolGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxPoolWithArgmaxConfig\": () => /* binding */ maxPoolWithArgmaxConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _MaxPoolWithArgmax_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MaxPoolWithArgmax_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst maxPoolWithArgmaxConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolWithArgmax,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const webglBackend = backend;\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n        const dilations = [1, 1];\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n        const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n        const [result, indexes] = (0,_MaxPoolWithArgmax_impl__WEBPACK_IMPORTED_MODULE_1__.maxPoolWithArgmaxImpl)(x, includeBatchInIndex, convInfo, webglBackend);\n        return [result, indexes];\n    }\n};\n//# sourceMappingURL=MaxPoolWithArgmax.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxPoolWithArgmaxImpl\": () => /* binding */ maxPoolWithArgmaxImpl\n/* harmony export */ });\n/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pool_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nfunction maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {\n    let program = new _pool_gpu__WEBPACK_IMPORTED_MODULE_0__.Pool2DProgram(convInfo, 'max', false);\n    const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n    program = new _pool_gpu__WEBPACK_IMPORTED_MODULE_0__.Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n    const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n    return [poolOutput, indexOutput];\n}\n//# sourceMappingURL=MaxPoolWithArgmax_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxImpl\": () => /* binding */ maxImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction maxImpl(x, reduceShape, outShape, backend) {\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__.reduce)(reshapedInput, x.dtype, 'max', backend);\n    const reshapedOutput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n//# sourceMappingURL=Max_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maximum\": () => /* binding */ maximum,\n/* harmony export */   \"maximumConfig\": () => /* binding */ maximumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nconst MAXIMUM = _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET + `\n  return result;\n`;\nconst maximum = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.binaryKernelFunc)({\n    opSnippet: MAXIMUM,\n    packedOpSnippet: MAXIMUM_PACKED,\n    cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__.maximumImplCPU\n});\nconst maximumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum,\n    backendName: 'webgl',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"meanConfig\": () => /* binding */ meanConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Mean_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mean_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst meanConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mean,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { keepDims, axis } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n        let axes = origAxes;\n        const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n        const meanInputIsTransposed = permutedAxes != null;\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n        const intermediates = [];\n        let meanInput = x;\n        if (meanInputIsTransposed) {\n            if (shouldExecuteOnCPU) {\n                const xTexData = webglBackend.texData.get(meanInput.dataId);\n                const values = xTexData.values;\n                const newShape = new Array(xRank);\n                for (let i = 0; i < newShape.length; i++) {\n                    newShape[i] = x.shape[permutedAxes[i]];\n                }\n                const meanInputValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);\n                meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n                const meanInputData = webglBackend.texData.get(meanInput.dataId);\n                meanInputData.values = meanInputValues;\n            }\n            else {\n                meanInput = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(x, permutedAxes, webglBackend);\n            }\n            intermediates.push(meanInput);\n            axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);\n        }\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n        const [meanOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n        let outShape = meanOutShape;\n        if (keepDims) {\n            // rather than reshape at the end, set the target shape here.\n            outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n        }\n        const out = (0,_Mean_impl__WEBPACK_IMPORTED_MODULE_3__.meanImpl)(meanInput, reduceShape, outShape, webglBackend);\n        for (const i of intermediates) {\n            webglBackend.disposeIntermediateTensorInfo(i);\n        }\n        return out;\n    }\n};\n//# sourceMappingURL=Mean.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"meanImpl\": () => /* binding */ meanImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction meanImpl(x, reduceShape, outShape, backend) {\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__.reduce)(reshapedInput, 'float32', 'mean', backend);\n    const reshapedOutput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n//# sourceMappingURL=Mean_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"min\": () => /* binding */ min,\n/* harmony export */   \"minConfig\": () => /* binding */ minConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction min(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n    const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(a2D, a2D.dtype, 'min', backend);\n    let res;\n    if (keepDims) {\n        const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nconst minConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Min,\n    backendName: 'webgl',\n    kernelFunc: min\n};\n//# sourceMappingURL=Min.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"minimum\": () => /* binding */ minimum,\n/* harmony export */   \"minimumConfig\": () => /* binding */ minimumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nconst MINIMUM = _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET + `\n  return result;\n`;\nconst minimum = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.binaryKernelFunc)({\n    opSnippet: MINIMUM,\n    packedOpSnippet: MINIMUM_PACKED,\n    cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__.minimumImplCPU\n});\nconst minimumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum,\n    backendName: 'webgl',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mirrorPadKernelFunc\": () => /* binding */ mirrorPadKernelFunc,\n/* harmony export */   \"mirrorPadConfig\": () => /* binding */ mirrorPadConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _mirror_pad_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mirror_pad_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js\");\n/* harmony import */ var _mirror_pad_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mirror_pad_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst mirrorPadKernelFunc = ({ inputs, backend, attrs }) => {\n    const { x } = inputs;\n    const { paddings, mode } = attrs;\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new _mirror_pad_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.MirrorPadPackedProgram(x.shape, paddings, mode) :\n        new _mirror_pad_gpu__WEBPACK_IMPORTED_MODULE_2__.MirrorPadProgram(x.shape, paddings, mode);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n};\nconst mirrorPadConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MirrorPad,\n    backendName: 'webgl',\n    kernelFunc: mirrorPadKernelFunc,\n};\n//# sourceMappingURL=MirrorPad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mod\": () => /* binding */ mod,\n/* harmony export */   \"modConfig\": () => /* binding */ modConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return result;\n`;\nconst mod = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)({\n    opSnippet: MOD,\n    packedOpSnippet: MOD_PACKED,\n});\nconst modConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mod,\n    backendName: 'webgl',\n    kernelFunc: mod\n};\n//# sourceMappingURL=Mod.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"multinomial\": () => /* binding */ multinomial,\n/* harmony export */   \"multinomialConfig\": () => /* binding */ multinomialConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _multinomial_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../multinomial_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js\");\n/* harmony import */ var _Softmax__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Softmax */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    const probs = normalized ?\n        logits :\n        (0,_Softmax__WEBPACK_IMPORTED_MODULE_1__.softmax)({ inputs: { logits }, backend, attrs: { dim: logits.shape.length - 1 } });\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new _multinomial_gpu__WEBPACK_IMPORTED_MODULE_2__.MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    const res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probs);\n    }\n    return res;\n}\nconst multinomialConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multinomial,\n    backendName: 'webgl',\n    kernelFunc: multinomial\n};\n//# sourceMappingURL=Multinomial.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"multiply\": () => /* binding */ multiply,\n/* harmony export */   \"multiplyConfig\": () => /* binding */ multiplyConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_complex_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\nconst MUL = 'return a * b;';\nfunction multiply(args) {\n    const { inputs, backend } = args;\n    const { a, b } = inputs;\n    const dtype = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.upcastType(a.dtype, b.dtype);\n    if (a.dtype === 'complex64') {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const realProgram = new _binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpComplexProgram(_binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n        const imagProgram = new _binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpComplexProgram(_binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n        const inputs = [\n            {\n                dataId: aData.complexTensorInfos.real.dataId,\n                dtype: aData.complexTensorInfos.real.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: aData.complexTensorInfos.imag.dataId,\n                dtype: aData.complexTensorInfos.imag.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.real.dataId,\n                dtype: bData.complexTensorInfos.real.dtype,\n                shape: b.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.imag.dataId,\n                dtype: bData.complexTensorInfos.imag.dtype,\n                shape: b.shape\n            }\n        ];\n        const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n        const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n        const complexOutput = (0,_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({ inputs: { real: realPart, imag: imagPart }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        // TODO(annxingyuan): CPU forwarding for complex inputs.\n        return complexOutput;\n    }\n    if (backend.shouldExecuteOnCPU([a, b])) {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const [outValues, outShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__.multiplyImplCPU)(a.shape, b.shape, aData.values, bData.values, dtype);\n        const out = backend.makeTensorInfo(outShape, dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n        return out;\n    }\n    let program;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        program = new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_4__.BinaryOpPackedProgram(MUL, a.shape, b.shape);\n    }\n    else {\n        program = new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_5__.BinaryOpProgram(MUL, a.shape, b.shape);\n    }\n    return backend.runWebGLProgram(program, [a, b], dtype);\n}\nconst multiplyConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply,\n    backendName: 'webgl',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"neg\": () => /* binding */ neg,\n/* harmony export */   \"negConfig\": () => /* binding */ negConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../unaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nconst NEG = `return -x;`;\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nfunction neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (backend.shouldExecuteOnCPU([x])) {\n        const xData = backend.texData.get(x.dataId);\n        const [outValues, newShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.negImplCPU)(xData.values, x.shape, x.dtype);\n        return backend.makeTensorInfo(newShape, x.dtype, outValues);\n    }\n    let program;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.UnaryOpPackedProgram(x.shape, NEG);\n    }\n    else {\n        program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.UnaryOpProgram(x.shape, NEG);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nconst negConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Neg,\n    backendName: 'webgl',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"nonMaxSuppressionV3\": () => /* binding */ nonMaxSuppressionV3,\n/* harmony export */   \"nonMaxSuppressionV3Config\": () => /* binding */ nonMaxSuppressionV3Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst nonMaxSuppressionV3Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV3Impl;\nfunction nonMaxSuppressionV3(args) {\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nconst nonMaxSuppressionV3Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV3,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV3\n};\n//# sourceMappingURL=NonMaxSuppressionV3.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"nonMaxSuppressionV4\": () => /* binding */ nonMaxSuppressionV4,\n/* harmony export */   \"nonMaxSuppressionV4Config\": () => /* binding */ nonMaxSuppressionV4Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst nonMaxSuppressionV4Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV4Impl;\nfunction nonMaxSuppressionV4(args) {\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n    ];\n}\nconst nonMaxSuppressionV4Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV4,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV4\n};\n//# sourceMappingURL=NonMaxSuppressionV4.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"nonMaxSuppressionV5\": () => /* binding */ nonMaxSuppressionV5,\n/* harmony export */   \"nonMaxSuppressionV5Config\": () => /* binding */ nonMaxSuppressionV5Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst nonMaxSuppressionV5Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV5Impl;\nfunction nonMaxSuppressionV5(args) {\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))\n    ];\n}\nconst nonMaxSuppressionV5Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV5,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV5\n};\n//# sourceMappingURL=NonMaxSuppressionV5.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"notEqual\": () => /* binding */ notEqual,\n/* harmony export */   \"notEqualConfig\": () => /* binding */ notEqualConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst NOT_EQUAL = `return float(a != b);`;\nconst notEqual = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: NOT_EQUAL, dtype: 'bool' });\nconst notEqualConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual,\n    backendName: 'webgl',\n    kernelFunc: notEqual,\n};\n//# sourceMappingURL=NotEqual.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"oneHot\": () => /* binding */ oneHot,\n/* harmony export */   \"oneHotConfig\": () => /* binding */ oneHotConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _onehot_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../onehot_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst oneHot = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    const indicesSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(indices.shape);\n    const program = new _onehot_gpu__WEBPACK_IMPORTED_MODULE_1__.OneHotProgram(indicesSize, depth, onValue, offValue);\n    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: indices }, backend, attrs: { shape: [indicesSize] } });\n    const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n    backend.disposeIntermediateTensorInfo(reshaped);\n    const outShape = [...indices.shape, depth];\n    const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return out;\n};\nconst oneHotConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OneHot,\n    backendName: 'webgl',\n    kernelFunc: oneHot\n};\n//# sourceMappingURL=OneHot.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"onesLike\": () => /* binding */ onesLike,\n/* harmony export */   \"onesLikeConfig\": () => /* binding */ onesLikeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Fill */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js\");\n/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js\");\n/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js\");\n/* harmony import */ var _ZerosLike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ZerosLike */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\nfunction onesLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported under string dtype');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({ inputs: { input: x }, backend });\n        const r = onesLike({ inputs: { x: realPart }, backend });\n        const imagPart = (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({ inputs: { input: x }, backend });\n        const i = (0,_ZerosLike__WEBPACK_IMPORTED_MODULE_3__.zerosLike)({ inputs: { x: imagPart }, backend });\n        const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        // TODO(cais, smilkov): Add WebGL shader for onesLike:\n        //   https://github.com/tensorflow/tfjs/issues/1293\n        return (0,_Fill__WEBPACK_IMPORTED_MODULE_5__.fill)({ attrs: { shape: x.shape, dtype: x.dtype, value: 1 }, backend });\n    }\n}\nconst onesLikeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OnesLike,\n    backendName: 'webgl',\n    kernelFunc: onesLike\n};\n//# sourceMappingURL=OnesLike.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pack\": () => /* binding */ pack,\n/* harmony export */   \"packConfig\": () => /* binding */ packConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Concat */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js\");\n/* harmony import */ var _ExpandDims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExpandDims */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_1__.expandDims)({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_1__.expandDims)({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = (0,_Concat__WEBPACK_IMPORTED_MODULE_2__.concat)({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nconst packConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pack,\n    backendName: 'webgl',\n    kernelFunc: pack\n};\n//# sourceMappingURL=Pack.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"padV2\": () => /* binding */ padV2,\n/* harmony export */   \"padV2Config\": () => /* binding */ padV2Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _pad_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pad_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js\");\n/* harmony import */ var _pad_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pad_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst padV2 = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new _pad_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.PadPackedProgram(x.shape, paddings, constantValue) :\n        new _pad_gpu__WEBPACK_IMPORTED_MODULE_2__.PadProgram(x.shape, paddings, constantValue);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n};\nconst padV2Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.PadV2,\n    backendName: 'webgl',\n    kernelFunc: padV2\n};\n//# sourceMappingURL=PadV2.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pow\": () => /* binding */ pow,\n/* harmony export */   \"powConfig\": () => /* binding */ powConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return result;\n`;\nconst pow = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)({ opSnippet: POW, packedOpSnippet: POW_PACKED });\nconst powConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pow,\n    backendName: 'webgl',\n    kernelFunc: pow\n};\n//# sourceMappingURL=Pow.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PRELU\": () => /* binding */ PRELU,\n/* harmony export */   \"PRELU_PACKED\": () => /* binding */ PRELU_PACKED,\n/* harmony export */   \"prelu\": () => /* binding */ prelu,\n/* harmony export */   \"preluConfig\": () => /* binding */ preluConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\");\n/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst PRELU = `return (a < 0.) ? b * a : a;`;\nconst PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nfunction prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n        new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.BinaryOpProgram(PRELU, x.shape, alpha.shape);\n    return backend.runWebGLProgram(program, [x, alpha], x.dtype);\n}\nconst preluConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prelu,\n    backendName: 'webgl',\n    kernelFunc: prelu\n};\n//# sourceMappingURL=Prelu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"prod\": () => /* binding */ prod,\n/* harmony export */   \"prodConfig\": () => /* binding */ prodConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nfunction prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);\n        toDispose.push(permutedX);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n    let res;\n    if (backend.shouldExecuteOnCPU([permutedX])) {\n        const xVals = backend.texData.get(permutedX.dataId).values;\n        const { outVals, outShape, outDtype } = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.prodImplCPU)(permutedX.shape, permutedX.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n    }\n    else {\n        const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n        const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n        const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n        const outputDType = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType)(x.dtype);\n        const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_4__.reduce)(a2D, outputDType, 'prod', backend);\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        toDispose.push(a2D);\n        toDispose.push(reduced);\n    }\n    if (keepDims) {\n        toDispose.push(res);\n        const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(res.shape, origAxes);\n        res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({ inputs: { x: res }, backend, attrs: { shape: newShape } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nconst prodConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prod,\n    backendName: 'webgl',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"range\": () => /* binding */ range,\n/* harmony export */   \"rangeConfig\": () => /* binding */ rangeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst range = (args) => {\n    const { backend, attrs } = args;\n    const { start, stop, step, dtype } = attrs;\n    const values = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.rangeImplCPU)(start, stop, step, dtype);\n    return backend.makeTensorInfo([values.length], dtype, values);\n};\nconst rangeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Range,\n    backendName: 'webgl',\n    kernelFunc: range\n};\n//# sourceMappingURL=Range.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"real\": () => /* binding */ real,\n/* harmony export */   \"realConfig\": () => /* binding */ realConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputData = backend.texData.get(input.dataId);\n    return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x: inputData.complexTensorInfos.real }, backend });\n}\nconst realConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Real,\n    backendName: 'webgl',\n    kernelFunc: real\n};\n//# sourceMappingURL=Real.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"realDiv\": () => /* binding */ realDiv,\n/* harmony export */   \"realDivConfig\": () => /* binding */ realDivConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\nconst realDiv = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true });\nconst realDivConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RealDiv,\n    backendName: 'webgl',\n    kernelFunc: realDiv,\n};\n//# sourceMappingURL=RealDiv.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"reciprocal\": () => /* binding */ reciprocal,\n/* harmony export */   \"reciprocalConfig\": () => /* binding */ reciprocalConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst RECIPROCAL = `return 1.0 / x;`;\nconst reciprocal = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: RECIPROCAL });\nconst reciprocalConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reciprocal,\n    backendName: 'webgl',\n    kernelFunc: reciprocal,\n};\n//# sourceMappingURL=Reciprocal.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"relu\": () => /* binding */ relu,\n/* harmony export */   \"reluConfig\": () => /* binding */ reluConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst RELU = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nconst relu = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: RELU, packedOpSnippet: RELU_PACKED });\nconst reluConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu,\n    backendName: 'webgl',\n    kernelFunc: relu\n};\n//# sourceMappingURL=Relu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"relu6\": () => /* binding */ relu6,\n/* harmony export */   \"relu6Config\": () => /* binding */ relu6Config\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst RELU6 = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nconst relu6 = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({ opSnippet: RELU6, packedOpSnippet: RELU6_PACKED });\nconst relu6Config = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu6,\n    backendName: 'webgl',\n    kernelFunc: relu6\n};\n//# sourceMappingURL=Relu6.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"reshape\": () => /* binding */ reshape,\n/* harmony export */   \"reshapeConfig\": () => /* binding */ reshapeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const webglBackend = backend;\n    const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n    const $shape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.inferFromImplicitShape(shape, xSize);\n    const $xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($shape);\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    const xTexData = webglBackend.texData.get(x.dataId);\n    if (xTexData.isPacked && !(0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isReshapeFree)(x.shape, $shape) &&\n        !(xTexData.texture !== null && (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isReshapeFree)(xTexData.shape, $shape))) {\n        return (0,_kernel_utils_reshape__WEBPACK_IMPORTED_MODULE_2__.packedReshape)(x, $shape, webglBackend);\n    }\n    webglBackend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nconst reshapeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reshape,\n    backendName: 'webgl',\n    kernelFunc: reshape\n};\n//# sourceMappingURL=Reshape.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeBilinear\": () => /* binding */ resizeBilinear,\n/* harmony export */   \"resizeBilinearConfig\": () => /* binding */ resizeBilinearConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _resize_bilinear_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resize_bilinear_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js\");\n/* harmony import */ var _resize_bilinear_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_bilinear_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction resizeBilinear(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new _resize_bilinear_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :\n        new _resize_bilinear_gpu__WEBPACK_IMPORTED_MODULE_2__.ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n    return backend.runWebGLProgram(program, [images], 'float32');\n}\nconst resizeBilinearConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinear,\n    backendName: 'webgl',\n    kernelFunc: resizeBilinear\n};\n//# sourceMappingURL=ResizeBilinear.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeBilinearGrad\": () => /* binding */ resizeBilinearGrad,\n/* harmony export */   \"resizeBilinearGradConfig\": () => /* binding */ resizeBilinearGradConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _resize_bilinear_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_bilinear_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction resizeBilinearGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    const program = new _resize_bilinear_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);\n    return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nconst resizeBilinearGradConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinearGrad,\n    backendName: 'webgl',\n    kernelFunc: resizeBilinearGrad\n};\n//# sourceMappingURL=ResizeBilinearGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeNearestNeighbor\": () => /* binding */ resizeNearestNeighbor,\n/* harmony export */   \"resizeNearestNeighborConfig\": () => /* binding */ resizeNearestNeighborConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _resize_nearest_neighbor_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_nearest_neighbor_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction resizeNearestNeighbor(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const program = new _resize_nearest_neighbor_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n    return backend.runWebGLProgram(program, [images], images.dtype);\n}\nconst resizeNearestNeighborConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighbor,\n    backendName: 'webgl',\n    kernelFunc: resizeNearestNeighbor\n};\n//# sourceMappingURL=ResizeNearestNeighbor.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeNearestNeighborGrad\": () => /* binding */ resizeNearestNeighborGrad,\n/* harmony export */   \"resizeNearestNeighborGradConfig\": () => /* binding */ resizeNearestNeighborGradConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _resize_nearest_neighbor_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_nearest_neighbor_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction resizeNearestNeighborGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    const program = new _resize_nearest_neighbor_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);\n    return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nconst resizeNearestNeighborGradConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighborGrad,\n    backendName: 'webgl',\n    kernelFunc: resizeNearestNeighborGrad\n};\n//# sourceMappingURL=ResizeNearestNeighborGrad.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"reverse\": () => /* binding */ reverse,\n/* harmony export */   \"reverseConfig\": () => /* binding */ reverseConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _reverse_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reverse_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js\");\n/* harmony import */ var _reverse_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reverse_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js\");\n/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    const xRank = x.shape.length;\n    const $dims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({ inputs: { x }, backend });\n    }\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new _reverse_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.ReversePackedProgram(x.shape, $dims) :\n        new _reverse_gpu__WEBPACK_IMPORTED_MODULE_3__.ReverseProgram(x.shape, $dims);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nconst reverseConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reverse,\n    backendName: 'webgl',\n    kernelFunc: reverse\n};\n//# sourceMappingURL=Reverse.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rotateWithOffsetConfig\": () => /* binding */ rotateWithOffsetConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _rotate_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rotate_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst rotateWithOffsetConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RotateWithOffset,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const webglBackend = backend;\n        const program = new _rotate_gpu__WEBPACK_IMPORTED_MODULE_1__.RotateProgram(image.shape, radians, fillValue, center);\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n        return output;\n    }\n};\n//# sourceMappingURL=RotateWithOffset.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"round\": () => /* binding */ round,\n/* harmony export */   \"roundConfig\": () => /* binding */ roundConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\nconst round = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: ROUND });\nconst roundConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Round,\n    backendName: 'webgl',\n    kernelFunc: round,\n};\n//# sourceMappingURL=Round.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rsqrt\": () => /* binding */ rsqrt,\n/* harmony export */   \"rsqrtConfig\": () => /* binding */ rsqrtConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst RSQRT = `return inversesqrt(x);`;\nconst rsqrt = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: RSQRT, cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.rsqrtImplCPU });\nconst rsqrtConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt,\n    backendName: 'webgl',\n    kernelFunc: rsqrt\n};\n//# sourceMappingURL=Rsqrt.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scatterNd\": () => /* binding */ scatterNd,\n/* harmony export */   \"scatterNdConfig\": () => /* binding */ scatterNdConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _scatter_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scatter_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    if (outputSize === 0) {\n        return backend.makeTensorInfo(shape, indices.dtype);\n    }\n    const flattenIndices = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });\n    const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });\n    const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n    const program = new _scatter_gpu__WEBPACK_IMPORTED_MODULE_2__.ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: res }, backend, attrs: { shape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    backend.disposeIntermediateTensorInfo(defaultValue);\n    return reshaped;\n}\nconst scatterNdConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ScatterNd,\n    backendName: 'webgl',\n    kernelFunc: scatterNd\n};\n//# sourceMappingURL=ScatterNd.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"select\": () => /* binding */ select,\n/* harmony export */   \"selectConfig\": () => /* binding */ selectConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _select_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../select_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction select(args) {\n    const { inputs, backend } = args;\n    const { condition, t, e } = inputs;\n    const program = new _select_gpu__WEBPACK_IMPORTED_MODULE_1__.SelectProgram(condition.shape.length, t.shape, t.shape.length);\n    return backend.runWebGLProgram(program, [condition, t, e], (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(t.dtype, e.dtype));\n}\nconst selectConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Select,\n    backendName: 'webgl',\n    kernelFunc: select\n};\n//# sourceMappingURL=Select.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"selu\": () => /* binding */ selu,\n/* harmony export */   \"seluConfig\": () => /* binding */ seluConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.SELU_SCALEALPHA};\n  float scale = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\nconst selu = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SELU });\nconst seluConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Selu,\n    backendName: 'webgl',\n    kernelFunc: selu,\n};\n//# sourceMappingURL=Selu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sigmoid\": () => /* binding */ sigmoid,\n/* harmony export */   \"sigmoidConfig\": () => /* binding */ sigmoidConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\nconst sigmoid = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SIGMOID });\nconst sigmoidConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sigmoid,\n    backendName: 'webgl',\n    kernelFunc: sigmoid,\n};\n//# sourceMappingURL=Sigmoid.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sign\": () => /* binding */ sign,\n/* harmony export */   \"signConfig\": () => /* binding */ signConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\nconst sign = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SIGN });\nconst signConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sign,\n    backendName: 'webgl',\n    kernelFunc: sign,\n};\n//# sourceMappingURL=Sign.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sin\": () => /* binding */ sin,\n/* harmony export */   \"sinConfig\": () => /* binding */ sinConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SIN = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\nconst sin = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SIN });\nconst sinConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sin,\n    backendName: 'webgl',\n    kernelFunc: sin,\n};\n//# sourceMappingURL=Sin.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sinh\": () => /* binding */ sinh,\n/* harmony export */   \"sinhConfig\": () => /* binding */ sinhConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nconst sinh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SINH });\nconst sinhConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sinh,\n    backendName: 'webgl',\n    kernelFunc: sinh,\n};\n//# sourceMappingURL=Sinh.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"slice\": () => /* binding */ slice,\n/* harmony export */   \"sliceConfig\": () => /* binding */ sliceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _slice_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../slice_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js\");\n/* harmony import */ var _slice_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../slice_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction shallowSlice(x, begin, size, backend) {\n    const xTexData = backend.texData.get(x.dataId);\n    const t = backend.makeTensorInfo(size, x.dtype);\n    const newTexData = backend.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.computeFlatOffset(begin, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape));\n    if (xTexData.slice) {\n        // We are slicing an already sliced tensor, so we have to accumulate\n        // the offset.\n        flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n        flatOffset,\n        // Point to the original dataId, which is used to do ref counting.\n        origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n    // Increase the ref count for that data bucket.\n    const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n    return t;\n}\nfunction slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    const [$begin, $size] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.parseSliceParams(x, begin, size);\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.assertParamsValid(x, $begin, $size);\n    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($size) === 0) {\n        return backend.makeTensorInfo($size, x.dtype, []);\n    }\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n        const xTexData = backend.texData.get(x.dataId);\n        const outValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.sliceImplCPU)(xTexData.values, $begin, $size, x.shape, x.dtype);\n        return backend.makeTensorInfo($size, x.dtype, outValues);\n    }\n    const { isPacked } = backend.texData.get(x.dataId);\n    const isContinous = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.isSliceContinous(x.shape, $begin, $size);\n    if (isPacked || !isContinous) {\n        const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new _slice_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.SlicePackedProgram($size) :\n            new _slice_gpu__WEBPACK_IMPORTED_MODULE_3__.SliceProgram($size);\n        const customSetup = program.getCustomSetupFunc($begin);\n        return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n    }\n    backend.uploadToGPU(x.dataId);\n    return shallowSlice(x, $begin, $size, backend);\n}\nconst sliceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Slice,\n    backendName: 'webgl',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"softmax\": () => /* binding */ softmax,\n/* harmony export */   \"softmaxConfig\": () => /* binding */ softmaxConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exp */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js\");\n/* harmony import */ var _Max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Max */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js\");\n/* harmony import */ var _RealDiv__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RealDiv */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sub */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js\");\n/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\nfunction softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam([dim], logits.shape);\n    const maxLogit = (0,_Max__WEBPACK_IMPORTED_MODULE_1__.max)({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitsReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = (0,_Sub__WEBPACK_IMPORTED_MODULE_3__.sub)({ inputs: { a: logits, b: maxLogitsReshaped }, backend });\n    const b = (0,_Exp__WEBPACK_IMPORTED_MODULE_4__.exp)({ inputs: { x: a }, backend });\n    const sumExp = (0,_Sum__WEBPACK_IMPORTED_MODULE_5__.sum)({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumExpReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const res = (0,_RealDiv__WEBPACK_IMPORTED_MODULE_6__.realDiv)({ inputs: { a: b, b: sumExpReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumExpReshaped);\n    return res;\n}\nconst softmaxConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softmax,\n    backendName: 'webgl',\n    kernelFunc: softmax\n};\n//# sourceMappingURL=Softmax.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"softplus\": () => /* binding */ softplus,\n/* harmony export */   \"softplusConfig\": () => /* binding */ softplusConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\nconst softplus = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SOFTPLUS });\nconst softplusConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softplus,\n    backendName: 'webgl',\n    kernelFunc: softplus,\n};\n//# sourceMappingURL=Softplus.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spaceToBatchND\": () => /* binding */ spaceToBatchND,\n/* harmony export */   \"spaceToBatchNDConfig\": () => /* binding */ spaceToBatchNDConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _PadV2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PadV2 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nconst spaceToBatchND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const toDispose = [];\n    const paddedX = (0,_PadV2__WEBPACK_IMPORTED_MODULE_1__.padV2)({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapedPaddedX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: paddedX }, backend, attrs: { shape: reshapedPaddedShape } });\n    const paddedXT = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({\n        inputs: { x: reshapedPaddedX },\n        backend,\n        attrs: { perm: permutedReshapedPaddedPermutation }\n    });\n    const result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: paddedXT }, backend, attrs: { shape: flattenShape } });\n    toDispose.push(paddedX);\n    toDispose.push(reshapedPaddedX);\n    toDispose.push(paddedXT);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n};\nconst spaceToBatchNDConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SpaceToBatchND,\n    backendName: 'webgl',\n    kernelFunc: spaceToBatchND\n};\n//# sourceMappingURL=SpaceToBatchND.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sparseToDense\": () => /* binding */ sparseToDense,\n/* harmony export */   \"sparseToDenseConfig\": () => /* binding */ sparseToDenseConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _scatter_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scatter_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, strides, outputSize } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const program = new _scatter_gpu__WEBPACK_IMPORTED_MODULE_1__.ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n    const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: res }, backend, attrs: { shape: outputShape } });\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nconst sparseToDenseConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseToDense,\n    backendName: 'webgl',\n    kernelFunc: sparseToDense\n};\n//# sourceMappingURL=SparseToDense.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"splitV\": () => /* binding */ splitV,\n/* harmony export */   \"splitVConfig\": () => /* binding */ splitVConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Slice */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const xRank = x.shape.length;\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[axis] = s;\n        const sliceT = (0,_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[axis] += s;\n        return sliceT;\n    });\n}\nconst splitVConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SplitV,\n    backendName: 'webgl',\n    kernelFunc: splitV\n};\n//# sourceMappingURL=SplitV.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sqrt\": () => /* binding */ sqrt,\n/* harmony export */   \"sqrtConfig\": () => /* binding */ sqrtConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SQRT = `return sqrt(x);`;\nconst sqrt = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SQRT });\nconst sqrtConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sqrt,\n    backendName: 'webgl',\n    kernelFunc: sqrt\n};\n//# sourceMappingURL=Sqrt.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"square\": () => /* binding */ square,\n/* harmony export */   \"squareConfig\": () => /* binding */ squareConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SQUARE = `return x * x;`;\nconst square = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: SQUARE });\nconst squareConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Square,\n    backendName: 'webgl',\n    kernelFunc: square,\n};\n//# sourceMappingURL=Square.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"squaredDifference\": () => /* binding */ squaredDifference,\n/* harmony export */   \"squaredDifferenceConfig\": () => /* binding */ squaredDifferenceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nconst squaredDifference = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({ opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE });\nconst squaredDifferenceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference,\n    backendName: 'webgl',\n    kernelFunc: squaredDifference,\n};\n//# sourceMappingURL=SquaredDifference.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"step\": () => /* binding */ step,\n/* harmony export */   \"stepConfig\": () => /* binding */ stepConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction step({ inputs, attrs, backend }) {\n    const { x } = inputs;\n    const opSnippet = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n    const program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.UnaryOpProgram(x.shape, opSnippet);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nconst stepConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Step,\n    backendName: 'webgl',\n    kernelFunc: step,\n};\n//# sourceMappingURL=Step.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"stridedSlice\": () => /* binding */ stridedSlice,\n/* harmony export */   \"stridedSliceConfig\": () => /* binding */ stridedSliceConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _strided_slice_gpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../strided_slice_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Slice */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nfunction stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    const { nonStrided, $begin, $strides, size, newShape, outShape } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    const $x = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x }, backend, attrs: { shape: newShape } });\n    let result;\n    if (nonStrided) {\n        const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_2__.slice)({ inputs: { x: $x }, backend, attrs: { begin: $begin, size } });\n        result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else if (outShape.some(axis => axis === 0)) {\n        result = backend.makeTensorInfo(outShape, x.dtype, []);\n    }\n    else {\n        const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n        if (shouldExecuteOnCPU) {\n            const xTexData = backend.texData.get($x.dataId);\n            const values = xTexData.values;\n            const xBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)($x.shape, $x.dtype, values);\n            const resultValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__.stridedSliceImplCPU)(outShape, xBuf, $strides, $begin);\n            result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n        }\n        else {\n            const program = new _strided_slice_gpu__WEBPACK_IMPORTED_MODULE_4__.StridedSliceProgram($begin, $strides, outShape);\n            result = backend.runWebGLProgram(program, [$x], $x.dtype);\n        }\n    }\n    const resultReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo($x);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nconst stridedSliceConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StridedSlice,\n    backendName: 'webgl',\n    kernelFunc: stridedSlice\n};\n//# sourceMappingURL=StridedSlice.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sub\": () => /* binding */ sub,\n/* harmony export */   \"subConfig\": () => /* binding */ subConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nconst SUB = 'return a - b;';\nconst sub = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({\n    opSnippet: SUB,\n    packedOpSnippet: SUB,\n    supportsComplex: true,\n    cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.subImplCPU\n});\nconst subConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub,\n    backendName: 'webgl',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sum\": () => /* binding */ sum,\n/* harmony export */   \"sumConfig\": () => /* binding */ sumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Sum_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sum_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    return (0,_Sum_impl__WEBPACK_IMPORTED_MODULE_1__.sumImpl)(x, axis, keepDims, backend);\n}\nconst sumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sum,\n    backendName: 'webgl',\n    kernelFunc: sum\n};\n//# sourceMappingURL=Sum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sumImpl\": () => /* binding */ sumImpl\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction sumImpl(x, axis, keepDims, backend) {\n    const reductionIndices = axis;\n    const xRank = x.shape.length;\n    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);\n    const sumInputIsTransposed = permutedAxes != null;\n    let sumInput = x;\n    if (sumInputIsTransposed) {\n        sumInput = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImpl)(x, permutedAxes, backend);\n        axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [sumOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n    let outShape = sumOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n    }\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);\n    const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend });\n    const outType = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType)(x.dtype);\n    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(reshapedInput, outType, 'sum', backend);\n    const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (sumInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(sumInput);\n    }\n    return out;\n}\n//# sourceMappingURL=Sum_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tan\": () => /* binding */ tan,\n/* harmony export */   \"tanConfig\": () => /* binding */ tanConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst TAN = `return tan(x);`;\nconst tan = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: TAN });\nconst tanConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tan,\n    backendName: 'webgl',\n    kernelFunc: tan,\n};\n//# sourceMappingURL=Tan.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tanh\": () => /* binding */ tanh,\n/* harmony export */   \"tanhConfig\": () => /* binding */ tanhConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\nconst tanh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({ opSnippet: TANH });\nconst tanhConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tanh,\n    backendName: 'webgl',\n    kernelFunc: tanh,\n};\n//# sourceMappingURL=Tanh.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tile\": () => /* binding */ tile,\n/* harmony export */   \"tileConfig\": () => /* binding */ tileConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _tile_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tile_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction tile(params) {\n    const { inputs, backend, attrs } = params;\n    const { x } = inputs;\n    const { reps } = attrs;\n    if (x.dtype === 'string') {\n        const data = backend.texData.get(x.dataId).values;\n        const decodedData = data.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.decodeString(d));\n        const buf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(x.shape, x.dtype, decodedData);\n        const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.tileImplCPU)(buf, reps);\n        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const program = new _tile_gpu__WEBPACK_IMPORTED_MODULE_2__.TileProgram(x.shape, reps);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n}\nconst tileConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tile,\n    backendName: 'webgl',\n    kernelFunc: tile,\n};\n//# sourceMappingURL=Tile.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"topK\": () => /* binding */ topK,\n/* harmony export */   \"topKConfig\": () => /* binding */ topKConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction topK(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { k, sorted } = attrs;\n    const xVals = backend.texData.get(x.dataId).values;\n    const [allTopKVals, allTopKIndices] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.topKImplCPU)(xVals, x.shape, x.dtype, k, sorted);\n    return [\n        backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n        backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n}\nconst topKConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TopK,\n    backendName: 'webgl',\n    kernelFunc: topK\n};\n//# sourceMappingURL=TopK.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"transpose\": () => /* binding */ transpose,\n/* harmony export */   \"transposeConfig\": () => /* binding */ transposeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js\");\n/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction transpose(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    let out;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n        const xTexData = webglBackend.texData.get(x.dataId);\n        const values = xTexData.values;\n        const outValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImplCPU)(values, x.shape, x.dtype, perm, newShape);\n        out = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const outData = webglBackend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(x, perm, webglBackend);\n    }\n    return out;\n}\nconst transposeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transpose,\n    backendName: 'webgl',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"transposeImpl\": () => /* binding */ transposeImpl,\n/* harmony export */   \"transposeImplCPU\": () => /* reexport safe */ _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__.transposeImplCPU\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _transpose_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transpose_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js\");\n/* harmony import */ var _transpose_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transpose_packed_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\nfunction transposeImpl(x, perm, backend) {\n    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new _transpose_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.TransposePackedProgram(x.shape, perm) :\n        new _transpose_gpu__WEBPACK_IMPORTED_MODULE_2__.TransposeProgram(x.shape, perm);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\n//# sourceMappingURL=Transpose_impl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"unique\": () => /* binding */ unique,\n/* harmony export */   \"uniqueConfig\": () => /* binding */ uniqueConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction unique(args) {\n    const { inputs, attrs, backend } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'unique');\n    // For now, always forward calculation to the CPU backend.\n    console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');\n    const values = backend.readSync(x.dataId);\n    const { outputValues, outputShape, indices } = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.uniqueImplCPU)(values, axis, x.shape, x.dtype);\n    return [\n        backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n        backend.makeTensorInfo([indices.length], 'int32', indices),\n    ];\n}\nconst uniqueConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unique,\n    backendName: 'webgl',\n    kernelFunc: unique,\n};\n//# sourceMappingURL=Unique.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"unpack\": () => /* binding */ unpack,\n/* harmony export */   \"unpackConfig\": () => /* binding */ unpackConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Slice */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const x = value;\n    const xRank = x.shape.length;\n    const num = value.shape[axis];\n    const outShape = new Array(xRank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < xRank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = x.shape[i];\n        }\n    }\n    const toDispose = [];\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n        begin[axis] = i;\n        const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({ inputs: { x }, backend, attrs: { begin, size } });\n        const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        res[i] = reshaped;\n        toDispose.push(sliced);\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nconst unpackConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unpack,\n    backendName: 'webgl',\n    kernelFunc: unpack\n};\n//# sourceMappingURL=Unpack.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"unsortedSegmentSum\": () => /* binding */ unsortedSegmentSum,\n/* harmony export */   \"unsortedSegmentSumConfig\": () => /* binding */ unsortedSegmentSumConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _segment_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../segment_gpu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js\");\n/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Range */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js\");\n/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _Tile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Tile */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js\");\n/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\nfunction unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    let axis = 0;\n    const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x }, backend, attrs: { perm: permutation } });\n        toDispose.push(permutedX);\n        axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(1, xRank)[0];\n    }\n    const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    toDispose.push(a2D);\n    const outputDType = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType)(x.dtype);\n    const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new _segment_gpu__WEBPACK_IMPORTED_MODULE_3__.SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        const rangeInfo = (0,_Range__WEBPACK_IMPORTED_MODULE_4__.range)({\n            backend,\n            attrs: { start: 0, stop: numSegments, step: 1, dtype: 'float32' }\n        });\n        const tileInfo = (0,_Tile__WEBPACK_IMPORTED_MODULE_5__.tile)({\n            inputs: { x: rangeInfo },\n            backend,\n            attrs: { reps: [inSize / windowSize] }\n        });\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n        const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n    };\n    const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({ inputs: { x: segOpResult }, backend, attrs: { shape: outShape } });\n    let result = reshaped;\n    if (permutation != null) {\n        toDispose.push(reshaped);\n        const perm = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getUndoAxesPermutation(permutation);\n        result = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({ inputs: { x: result }, backend, attrs: { perm } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nconst unsortedSegmentSumConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.UnsortedSegmentSum,\n    backendName: 'webgl',\n    kernelFunc: unsortedSegmentSum\n};\n//# sourceMappingURL=UnsortedSegmentSum.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zerosLike\": () => /* binding */ zerosLike,\n/* harmony export */   \"zerosLikeConfig\": () => /* binding */ zerosLikeConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Fill */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js\");\n/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js\");\n/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\nfunction zerosLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'complex64') {\n        const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({ inputs: { input: x }, backend });\n        const r = zerosLike({ inputs: { x: realPart }, backend });\n        const imagPart = (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return (0,_Fill__WEBPACK_IMPORTED_MODULE_4__.fill)({\n            attrs: {\n                shape: x.shape,\n                dtype: x.dtype,\n                value: x.dtype === 'string' ? '' : 0\n            },\n            backend\n        });\n    }\n}\nconst zerosLikeConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ZerosLike,\n    backendName: 'webgl',\n    kernelFunc: zerosLike\n};\n//# sourceMappingURL=ZerosLike.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_fusedMatMul\": () => /* binding */ _fusedMatMul,\n/* harmony export */   \"_fusedMatMulConfig\": () => /* binding */ _fusedMatMulConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchMatMul_impl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nfunction _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    return (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.batchMatMulImpl)({\n        a,\n        b,\n        transposeA,\n        transposeB,\n        backend,\n        bias,\n        preluActivationWeights,\n        leakyreluAlpha,\n        activation\n    });\n}\nconst _fusedMatMulConfig = {\n    kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__._FusedMatMul,\n    backendName: 'webgl',\n    kernelFunc: _fusedMatMul,\n};\n//# sourceMappingURL=_FusedMatMul.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LRNProgram\": () => /* binding */ LRNProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass LRNProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LRNGradProgram\": () => /* binding */ LRNGradProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass LRNGradProgram {\n    constructor(inputShape, depthRadius, bias, alpha, beta) {\n        this.variableNames = ['inputImage', 'outputImage', 'dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        this.depth = inputShape[3];\n        this.depthRadius = depthRadius;\n        this.bias = bias;\n        this.alpha = alpha;\n        this.beta = beta;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_grad_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LRNPackedProgram\": () => /* binding */ LRNPackedProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass LRNPackedProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MaxPool2DBackpropProgram\": () => /* binding */ MaxPool2DBackpropProgram,\n/* harmony export */   \"MaxPool3DBackpropProgram\": () => /* binding */ MaxPool3DBackpropProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass MaxPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nclass MaxPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=max_pool_backprop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeanProgram\": () => /* binding */ MeanProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass MeanProgram {\n    constructor(reduceInfo, divisor) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `sumValue += dot(values, ones);`;\n        if (divisor != null) {\n            const denominator = 1 / divisor;\n            updateSnippet = `sumValue += dot(values * ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.isInt(denominator) ? denominator.toPrecision(2) :\n                denominator}, ones);`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mean_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MirrorPadProgram\": () => /* binding */ MirrorPadProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass MirrorPadProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        const offset = mode === 'reflect' ? 0 : 1;\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mirror_pad_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MirrorPadPackedProgram\": () => /* binding */ MirrorPadPackedProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nclass MirrorPadPackedProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('rc', rank);\n        const source = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const offset = mode === 'reflect' ? 0 : 1;\n        let mainLoop = '';\n        if (rank === 1) {\n            const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        else {\n            const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n        }\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mirror_pad_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MatMulPackedProgram\": () => /* binding */ MatMulPackedProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass MatMulPackedProgram {\n    constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {\n        this.variableNames = ['matrixA', 'matrixB'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const sharedDim = transposeA ? aShape[1] : aShape[2];\n        const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n        const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n        const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n        const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n        const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluActivation) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        let batchASnippet = 'rc.x';\n        let batchBSnippet = 'rc.x';\n        if (aShape[0] < bShape[0]) {\n            batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n        }\n        else if (bShape[0] < aShape[0]) {\n            batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mulmat_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultinomialProgram\": () => /* binding */ MultinomialProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass MultinomialProgram {\n    constructor(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n    }\n    getCustomSetupFunc(seed) {\n        return (gpgpu, webGLProgram) => {\n            if (this.seedLoc == null) {\n                this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n            }\n            gpgpu.gl.uniform1f(this.seedLoc, seed);\n        };\n    }\n}\n//# sourceMappingURL=multinomial_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OneHotProgram\": () => /* binding */ OneHotProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass OneHotProgram {\n    constructor(numIndices, depth, onValue, offValue) {\n        this.variableNames = ['indices'];\n        this.outputShape = [numIndices, depth];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=onehot_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PackProgram\": () => /* binding */ PackProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass PackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        // Only input / output 3D tensors.\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        if (rank === 0) {\n            this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n        }\n        else {\n            const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_0__.getChannels)('rc', rank);\n            const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);\n            const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n            const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n            const output = getOutput(outputShape, channels);\n            this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n        }\n    }\n}\nfunction getSourceCoordsArr(rank, dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n            let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n            for (let d = 2; d < rank; d++) {\n                coord = `${dims[dims.length - 1 - d]},` + coord;\n            }\n            coords.push(coord);\n        }\n    }\n    return coords;\n}\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n    if (rank === 1) {\n        return `rc > ${shape[0]}`;\n    }\n    let cond = '';\n    for (let i = rank - 2; i < rank; i++) {\n        cond += `${dims[i]} >= ${shape[i]}`;\n        if (i < rank - 1) {\n            cond += '||';\n        }\n    }\n    return cond;\n}\nfunction getSetup(rank, cols, rows, dims) {\n    if (rank === 1) {\n        return '';\n    }\n    const innerDims = dims.slice(-2);\n    return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\nfunction getOutput(shape, dims) {\n    const rank = shape.length;\n    const sourceCoords = getSourceCoordsArr(rank, dims);\n    if (rank === 1) {\n        return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n//# sourceMappingURL=pack_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getVecChannels\": () => /* binding */ getVecChannels,\n/* harmony export */   \"getChannels\": () => /* binding */ getChannels,\n/* harmony export */   \"getSourceCoords\": () => /* binding */ getSourceCoords\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction getVecChannels(name, rank) {\n    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\nfunction getChannels(name, rank) {\n    if (rank === 1) {\n        return [name];\n    }\n    return getVecChannels(name, rank);\n}\nfunction getSourceCoords(rank, dims) {\n    if (rank === 1) {\n        return 'rc';\n    }\n    let coords = '';\n    for (let i = 0; i < rank; i++) {\n        coords += dims[i];\n        if (i < rank - 1) {\n            coords += ',';\n        }\n    }\n    return coords;\n}\n//# sourceMappingURL=packing_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PadProgram\": () => /* binding */ PadProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PadPackedProgram\": () => /* binding */ PadPackedProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass PadPackedProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('rc', rank);\n        const source = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const componentSetup = [\n            `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n            rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n            rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n        ];\n        const paddingArea = rank === 1 ?\n            'rc < start || rc >= end' :\n            'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n        let mainLoop = '';\n        for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n            mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        mainLoop += (rank === 1 ? `} ` : `}}`);\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Pool2DProgram\": () => /* binding */ Pool2DProgram,\n/* harmony export */   \"Pool3DProgram\": () => /* binding */ Pool3DProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass Pool2DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                flattenPositionStr) :\n                `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\nclass Pool3DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ?\n                (includeBatchInIndex ?\n                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :\n                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pool_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ReduceProgram\": () => /* binding */ ReduceProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reduce_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _kernels_FusedMatMul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernels/_FusedMatMul */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js\");\n/* harmony import */ var _kernels_Abs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kernels/Abs */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js\");\n/* harmony import */ var _kernels_Acos__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./kernels/Acos */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js\");\n/* harmony import */ var _kernels_Acosh__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./kernels/Acosh */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js\");\n/* harmony import */ var _kernels_Add__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./kernels/Add */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js\");\n/* harmony import */ var _kernels_AddN__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./kernels/AddN */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js\");\n/* harmony import */ var _kernels_All__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./kernels/All */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js\");\n/* harmony import */ var _kernels_Any__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./kernels/Any */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js\");\n/* harmony import */ var _kernels_ArgMax__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./kernels/ArgMax */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js\");\n/* harmony import */ var _kernels_ArgMin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./kernels/ArgMin */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js\");\n/* harmony import */ var _kernels_Asin__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kernels/Asin */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js\");\n/* harmony import */ var _kernels_Asinh__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./kernels/Asinh */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js\");\n/* harmony import */ var _kernels_Atan__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./kernels/Atan */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js\");\n/* harmony import */ var _kernels_Atan2__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./kernels/Atan2 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js\");\n/* harmony import */ var _kernels_Atanh__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./kernels/Atanh */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js\");\n/* harmony import */ var _kernels_AvgPool__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./kernels/AvgPool */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js\");\n/* harmony import */ var _kernels_AvgPool3D__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./kernels/AvgPool3D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js\");\n/* harmony import */ var _kernels_AvgPool3DGrad__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./kernels/AvgPool3DGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js\");\n/* harmony import */ var _kernels_AvgPoolGrad__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./kernels/AvgPoolGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js\");\n/* harmony import */ var _kernels_BatchMatMul__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./kernels/BatchMatMul */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js\");\n/* harmony import */ var _kernels_BatchNorm__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./kernels/BatchNorm */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js\");\n/* harmony import */ var _kernels_BatchToSpaceND__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./kernels/BatchToSpaceND */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js\");\n/* harmony import */ var _kernels_Bincount__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./kernels/Bincount */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js\");\n/* harmony import */ var _kernels_Cast__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./kernels/Cast */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js\");\n/* harmony import */ var _kernels_Ceil__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./kernels/Ceil */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js\");\n/* harmony import */ var _kernels_ClipByValue__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./kernels/ClipByValue */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js\");\n/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./kernels/Complex */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\");\n/* harmony import */ var _kernels_ComplexAbs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./kernels/ComplexAbs */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js\");\n/* harmony import */ var _kernels_Concat__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./kernels/Concat */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js\");\n/* harmony import */ var _kernels_Conv2D__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./kernels/Conv2D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js\");\n/* harmony import */ var _kernels_Conv2DBackpropFilter__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./kernels/Conv2DBackpropFilter */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js\");\n/* harmony import */ var _kernels_Conv2DBackpropInput__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./kernels/Conv2DBackpropInput */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js\");\n/* harmony import */ var _kernels_Conv3D__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./kernels/Conv3D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js\");\n/* harmony import */ var _kernels_Conv3DBackpropFilterV2__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./kernels/Conv3DBackpropFilterV2 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js\");\n/* harmony import */ var _kernels_Conv3DBackpropInputV2__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./kernels/Conv3DBackpropInputV2 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js\");\n/* harmony import */ var _kernels_Cos__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./kernels/Cos */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js\");\n/* harmony import */ var _kernels_Cosh__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./kernels/Cosh */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js\");\n/* harmony import */ var _kernels_CropAndResize__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./kernels/CropAndResize */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js\");\n/* harmony import */ var _kernels_Cumsum__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./kernels/Cumsum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js\");\n/* harmony import */ var _kernels_DenseBincount__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./kernels/DenseBincount */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js\");\n/* harmony import */ var _kernels_DepthToSpace__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./kernels/DepthToSpace */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js\");\n/* harmony import */ var _kernels_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNative */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js\");\n/* harmony import */ var _kernels_DepthwiseConv2dNativeBackpropFilter__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNativeBackpropFilter */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js\");\n/* harmony import */ var _kernels_DepthwiseConv2dNativeBackpropInput__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNativeBackpropInput */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js\");\n/* harmony import */ var _kernels_Diag__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./kernels/Diag */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js\");\n/* harmony import */ var _kernels_Dilation2D__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./kernels/Dilation2D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js\");\n/* harmony import */ var _kernels_Elu__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./kernels/Elu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js\");\n/* harmony import */ var _kernels_EluGrad__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./kernels/EluGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js\");\n/* harmony import */ var _kernels_Equal__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./kernels/Equal */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js\");\n/* harmony import */ var _kernels_Erf__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./kernels/Erf */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js\");\n/* harmony import */ var _kernels_Exp__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./kernels/Exp */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js\");\n/* harmony import */ var _kernels_ExpandDims__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./kernels/ExpandDims */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js\");\n/* harmony import */ var _kernels_Expm1__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./kernels/Expm1 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js\");\n/* harmony import */ var _kernels_FFT__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./kernels/FFT */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js\");\n/* harmony import */ var _kernels_Fill__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./kernels/Fill */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js\");\n/* harmony import */ var _kernels_FlipLeftRight__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./kernels/FlipLeftRight */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js\");\n/* harmony import */ var _kernels_Floor__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./kernels/Floor */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js\");\n/* harmony import */ var _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./kernels/FloorDiv */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js\");\n/* harmony import */ var _kernels_FromPixels__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./kernels/FromPixels */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js\");\n/* harmony import */ var _kernels_FusedConv2D__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./kernels/FusedConv2D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js\");\n/* harmony import */ var _kernels_FusedDepthwiseConv2D__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./kernels/FusedDepthwiseConv2D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js\");\n/* harmony import */ var _kernels_GatherNd__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./kernels/GatherNd */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js\");\n/* harmony import */ var _kernels_GatherV2__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./kernels/GatherV2 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js\");\n/* harmony import */ var _kernels_Greater__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./kernels/Greater */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js\");\n/* harmony import */ var _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./kernels/GreaterEqual */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js\");\n/* harmony import */ var _kernels_Identity__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./kernels/Identity */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\");\n/* harmony import */ var _kernels_IFFT__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./kernels/IFFT */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js\");\n/* harmony import */ var _kernels_Imag__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./kernels/Imag */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js\");\n/* harmony import */ var _kernels_IsFinite__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./kernels/IsFinite */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js\");\n/* harmony import */ var _kernels_IsInf__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./kernels/IsInf */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js\");\n/* harmony import */ var _kernels_IsNaN__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./kernels/IsNaN */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js\");\n/* harmony import */ var _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./kernels/LeakyRelu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js\");\n/* harmony import */ var _kernels_Less__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./kernels/Less */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js\");\n/* harmony import */ var _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./kernels/LessEqual */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js\");\n/* harmony import */ var _kernels_LinSpace__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./kernels/LinSpace */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js\");\n/* harmony import */ var _kernels_Log__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./kernels/Log */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js\");\n/* harmony import */ var _kernels_Log1p__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./kernels/Log1p */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js\");\n/* harmony import */ var _kernels_LogicalAnd__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./kernels/LogicalAnd */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js\");\n/* harmony import */ var _kernels_LogicalNot__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./kernels/LogicalNot */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js\");\n/* harmony import */ var _kernels_LogicalOr__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./kernels/LogicalOr */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js\");\n/* harmony import */ var _kernels_LRN__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernels/LRN */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js\");\n/* harmony import */ var _kernels_LRNGrad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kernels/LRNGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js\");\n/* harmony import */ var _kernels_Max__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./kernels/Max */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js\");\n/* harmony import */ var _kernels_Maximum__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./kernels/Maximum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js\");\n/* harmony import */ var _kernels_MaxPool__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./kernels/MaxPool */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js\");\n/* harmony import */ var _kernels_MaxPool3D__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./kernels/MaxPool3D */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js\");\n/* harmony import */ var _kernels_MaxPool3DGrad__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./kernels/MaxPool3DGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js\");\n/* harmony import */ var _kernels_MaxPoolGrad__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./kernels/MaxPoolGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js\");\n/* harmony import */ var _kernels_MaxPoolWithArgmax__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./kernels/MaxPoolWithArgmax */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js\");\n/* harmony import */ var _kernels_Mean__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./kernels/Mean */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js\");\n/* harmony import */ var _kernels_Min__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./kernels/Min */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js\");\n/* harmony import */ var _kernels_Minimum__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./kernels/Minimum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js\");\n/* harmony import */ var _kernels_MirrorPad__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./kernels/MirrorPad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js\");\n/* harmony import */ var _kernels_Mod__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./kernels/Mod */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js\");\n/* harmony import */ var _kernels_Multinomial__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./kernels/Multinomial */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js\");\n/* harmony import */ var _kernels_Multiply__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./kernels/Multiply */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js\");\n/* harmony import */ var _kernels_Neg__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./kernels/Neg */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js\");\n/* harmony import */ var _kernels_NonMaxSuppressionV3__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV3 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js\");\n/* harmony import */ var _kernels_NonMaxSuppressionV4__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV4 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js\");\n/* harmony import */ var _kernels_NonMaxSuppressionV5__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV5 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js\");\n/* harmony import */ var _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./kernels/NotEqual */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js\");\n/* harmony import */ var _kernels_OneHot__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./kernels/OneHot */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js\");\n/* harmony import */ var _kernels_OnesLike__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./kernels/OnesLike */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js\");\n/* harmony import */ var _kernels_Pack__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./kernels/Pack */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js\");\n/* harmony import */ var _kernels_PadV2__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./kernels/PadV2 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js\");\n/* harmony import */ var _kernels_Pow__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./kernels/Pow */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js\");\n/* harmony import */ var _kernels_Prelu__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./kernels/Prelu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js\");\n/* harmony import */ var _kernels_Prod__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./kernels/Prod */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js\");\n/* harmony import */ var _kernels_Range__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./kernels/Range */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js\");\n/* harmony import */ var _kernels_Real__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./kernels/Real */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js\");\n/* harmony import */ var _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./kernels/RealDiv */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js\");\n/* harmony import */ var _kernels_Reciprocal__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./kernels/Reciprocal */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js\");\n/* harmony import */ var _kernels_Relu__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./kernels/Relu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js\");\n/* harmony import */ var _kernels_Relu6__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./kernels/Relu6 */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js\");\n/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./kernels/Reshape */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\");\n/* harmony import */ var _kernels_ResizeBilinear__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./kernels/ResizeBilinear */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js\");\n/* harmony import */ var _kernels_ResizeBilinearGrad__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./kernels/ResizeBilinearGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js\");\n/* harmony import */ var _kernels_ResizeNearestNeighbor__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./kernels/ResizeNearestNeighbor */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js\");\n/* harmony import */ var _kernels_ResizeNearestNeighborGrad__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./kernels/ResizeNearestNeighborGrad */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js\");\n/* harmony import */ var _kernels_Reverse__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./kernels/Reverse */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js\");\n/* harmony import */ var _kernels_RotateWithOffset__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./kernels/RotateWithOffset */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js\");\n/* harmony import */ var _kernels_Round__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./kernels/Round */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js\");\n/* harmony import */ var _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./kernels/Rsqrt */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js\");\n/* harmony import */ var _kernels_ScatterNd__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./kernels/ScatterNd */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js\");\n/* harmony import */ var _kernels_Select__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./kernels/Select */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js\");\n/* harmony import */ var _kernels_Selu__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./kernels/Selu */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js\");\n/* harmony import */ var _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./kernels/Sigmoid */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js\");\n/* harmony import */ var _kernels_Sign__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./kernels/Sign */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js\");\n/* harmony import */ var _kernels_Sin__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./kernels/Sin */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js\");\n/* harmony import */ var _kernels_Sinh__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./kernels/Sinh */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js\");\n/* harmony import */ var _kernels_Slice__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./kernels/Slice */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js\");\n/* harmony import */ var _kernels_Softmax__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./kernels/Softmax */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js\");\n/* harmony import */ var _kernels_Softplus__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./kernels/Softplus */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js\");\n/* harmony import */ var _kernels_SpaceToBatchND__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./kernels/SpaceToBatchND */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js\");\n/* harmony import */ var _kernels_SparseToDense__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./kernels/SparseToDense */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js\");\n/* harmony import */ var _kernels_SplitV__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./kernels/SplitV */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js\");\n/* harmony import */ var _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./kernels/Sqrt */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js\");\n/* harmony import */ var _kernels_Square__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./kernels/Square */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js\");\n/* harmony import */ var _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./kernels/SquaredDifference */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js\");\n/* harmony import */ var _kernels_Step__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./kernels/Step */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js\");\n/* harmony import */ var _kernels_StridedSlice__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./kernels/StridedSlice */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js\");\n/* harmony import */ var _kernels_Sub__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./kernels/Sub */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js\");\n/* harmony import */ var _kernels_Sum__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./kernels/Sum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js\");\n/* harmony import */ var _kernels_Tan__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./kernels/Tan */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js\");\n/* harmony import */ var _kernels_Tanh__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./kernels/Tanh */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js\");\n/* harmony import */ var _kernels_Tile__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./kernels/Tile */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js\");\n/* harmony import */ var _kernels_TopK__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./kernels/TopK */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js\");\n/* harmony import */ var _kernels_Transpose__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./kernels/Transpose */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\");\n/* harmony import */ var _kernels_Unique__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./kernels/Unique */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js\");\n/* harmony import */ var _kernels_Unpack__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./kernels/Unpack */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js\");\n/* harmony import */ var _kernels_UnsortedSegmentSum__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./kernels/UnsortedSegmentSum */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js\");\n/* harmony import */ var _kernels_ZerosLike__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./kernels/ZerosLike */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// List all kernel configs here\nconst kernelConfigs = [\n    _kernels_LRN__WEBPACK_IMPORTED_MODULE_1__.LRNConfig,\n    _kernels_LRNGrad__WEBPACK_IMPORTED_MODULE_2__.LRNGradConfig,\n    _kernels_FusedMatMul__WEBPACK_IMPORTED_MODULE_3__._fusedMatMulConfig,\n    _kernels_Abs__WEBPACK_IMPORTED_MODULE_4__.absConfig,\n    _kernels_Acos__WEBPACK_IMPORTED_MODULE_5__.acosConfig,\n    _kernels_Acosh__WEBPACK_IMPORTED_MODULE_6__.acoshConfig,\n    _kernels_Add__WEBPACK_IMPORTED_MODULE_7__.addConfig,\n    _kernels_AddN__WEBPACK_IMPORTED_MODULE_8__.addNConfig,\n    _kernels_All__WEBPACK_IMPORTED_MODULE_9__.allConfig,\n    _kernels_Any__WEBPACK_IMPORTED_MODULE_10__.anyConfig,\n    _kernels_ArgMax__WEBPACK_IMPORTED_MODULE_11__.argMaxConfig,\n    _kernels_ArgMin__WEBPACK_IMPORTED_MODULE_12__.argMinConfig,\n    _kernels_Asin__WEBPACK_IMPORTED_MODULE_13__.asinConfig,\n    _kernels_Asinh__WEBPACK_IMPORTED_MODULE_14__.asinhConfig,\n    _kernels_Atan2__WEBPACK_IMPORTED_MODULE_15__.atan2Config,\n    _kernels_Atan__WEBPACK_IMPORTED_MODULE_16__.atanConfig,\n    _kernels_Atanh__WEBPACK_IMPORTED_MODULE_17__.atanhConfig,\n    _kernels_AvgPool3D__WEBPACK_IMPORTED_MODULE_18__.avgPool3DConfig,\n    _kernels_AvgPool__WEBPACK_IMPORTED_MODULE_19__.avgPoolConfig,\n    _kernels_AvgPool3DGrad__WEBPACK_IMPORTED_MODULE_20__.avgPoolGrad3DConfig,\n    _kernels_AvgPoolGrad__WEBPACK_IMPORTED_MODULE_21__.avgPoolGradConfig,\n    _kernels_BatchMatMul__WEBPACK_IMPORTED_MODULE_22__.batchMatMulConfig,\n    _kernels_BatchNorm__WEBPACK_IMPORTED_MODULE_23__.batchNormConfig,\n    _kernels_BatchToSpaceND__WEBPACK_IMPORTED_MODULE_24__.batchToSpaceNDConfig,\n    _kernels_Bincount__WEBPACK_IMPORTED_MODULE_25__.bincountConfig,\n    _kernels_Cast__WEBPACK_IMPORTED_MODULE_26__.castConfig,\n    _kernels_Ceil__WEBPACK_IMPORTED_MODULE_27__.ceilConfig,\n    _kernels_ClipByValue__WEBPACK_IMPORTED_MODULE_28__.clipByValueConfig,\n    _kernels_ComplexAbs__WEBPACK_IMPORTED_MODULE_29__.complexAbsConfig,\n    _kernels_Complex__WEBPACK_IMPORTED_MODULE_30__.complexConfig,\n    _kernels_Concat__WEBPACK_IMPORTED_MODULE_31__.concatConfig,\n    _kernels_Conv2DBackpropFilter__WEBPACK_IMPORTED_MODULE_32__.conv2DBackpropFilterConfig,\n    _kernels_Conv2DBackpropInput__WEBPACK_IMPORTED_MODULE_33__.conv2DBackpropInputConfig,\n    _kernels_Conv2D__WEBPACK_IMPORTED_MODULE_34__.conv2DConfig,\n    _kernels_Conv3DBackpropFilterV2__WEBPACK_IMPORTED_MODULE_35__.conv3DBackpropFilterV2Config,\n    _kernels_Conv3DBackpropInputV2__WEBPACK_IMPORTED_MODULE_36__.conv3DBackpropInputConfig,\n    _kernels_Conv3D__WEBPACK_IMPORTED_MODULE_37__.conv3DConfig,\n    _kernels_Cos__WEBPACK_IMPORTED_MODULE_38__.cosConfig,\n    _kernels_Cosh__WEBPACK_IMPORTED_MODULE_39__.coshConfig,\n    _kernels_CropAndResize__WEBPACK_IMPORTED_MODULE_40__.cropAndResizeConfig,\n    _kernels_Cumsum__WEBPACK_IMPORTED_MODULE_41__.cumsumConfig,\n    _kernels_DenseBincount__WEBPACK_IMPORTED_MODULE_42__.denseBincountConfig,\n    _kernels_DepthToSpace__WEBPACK_IMPORTED_MODULE_43__.depthToSpaceConfig,\n    _kernels_DepthwiseConv2dNativeBackpropFilter__WEBPACK_IMPORTED_MODULE_44__.depthwiseConv2dNativeBackpropFilterConfig,\n    _kernels_DepthwiseConv2dNativeBackpropInput__WEBPACK_IMPORTED_MODULE_45__.depthwiseConv2dNativeBackpropInputConfig,\n    _kernels_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_46__.depthwiseConv2dNativeConfig,\n    _kernels_Diag__WEBPACK_IMPORTED_MODULE_47__.diagConfig,\n    _kernels_Dilation2D__WEBPACK_IMPORTED_MODULE_48__.dilation2DConfig,\n    _kernels_Elu__WEBPACK_IMPORTED_MODULE_49__.eluConfig,\n    _kernels_EluGrad__WEBPACK_IMPORTED_MODULE_50__.eluGradConfig,\n    _kernels_Equal__WEBPACK_IMPORTED_MODULE_51__.equalConfig,\n    _kernels_Erf__WEBPACK_IMPORTED_MODULE_52__.erfConfig,\n    _kernels_Exp__WEBPACK_IMPORTED_MODULE_53__.expConfig,\n    _kernels_ExpandDims__WEBPACK_IMPORTED_MODULE_54__.expandDimsConfig,\n    _kernels_Expm1__WEBPACK_IMPORTED_MODULE_55__.expm1Config,\n    _kernels_FFT__WEBPACK_IMPORTED_MODULE_56__.fftConfig,\n    _kernels_Fill__WEBPACK_IMPORTED_MODULE_57__.fillConfig,\n    _kernels_FlipLeftRight__WEBPACK_IMPORTED_MODULE_58__.flipLeftRightConfig,\n    _kernels_Floor__WEBPACK_IMPORTED_MODULE_59__.floorConfig,\n    _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_60__.floorDivConfig,\n    _kernels_FromPixels__WEBPACK_IMPORTED_MODULE_61__.fromPixelsConfig,\n    _kernels_FusedConv2D__WEBPACK_IMPORTED_MODULE_62__.fusedConv2DConfig,\n    _kernels_FusedDepthwiseConv2D__WEBPACK_IMPORTED_MODULE_63__.fusedDepthwiseConv2DConfig,\n    _kernels_GatherNd__WEBPACK_IMPORTED_MODULE_64__.gatherNdConfig,\n    _kernels_GatherV2__WEBPACK_IMPORTED_MODULE_65__.gatherV2Config,\n    _kernels_Greater__WEBPACK_IMPORTED_MODULE_66__.greaterConfig,\n    _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_67__.greaterEqualConfig,\n    _kernels_Identity__WEBPACK_IMPORTED_MODULE_68__.identityConfig,\n    _kernels_IFFT__WEBPACK_IMPORTED_MODULE_69__.ifftConfig,\n    _kernels_Imag__WEBPACK_IMPORTED_MODULE_70__.imagConfig,\n    _kernels_IsFinite__WEBPACK_IMPORTED_MODULE_71__.isFiniteConfig,\n    _kernels_IsInf__WEBPACK_IMPORTED_MODULE_72__.isInfConfig,\n    _kernels_IsNaN__WEBPACK_IMPORTED_MODULE_73__.isNaNConfig,\n    _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_74__.leakyReluConfig,\n    _kernels_Less__WEBPACK_IMPORTED_MODULE_75__.lessConfig,\n    _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_76__.lessEqualConfig,\n    _kernels_LinSpace__WEBPACK_IMPORTED_MODULE_77__.linSpaceConfig,\n    _kernels_Log1p__WEBPACK_IMPORTED_MODULE_78__.log1pConfig,\n    _kernels_Log__WEBPACK_IMPORTED_MODULE_79__.logConfig,\n    _kernels_LogicalAnd__WEBPACK_IMPORTED_MODULE_80__.logicalAndConfig,\n    _kernels_LogicalNot__WEBPACK_IMPORTED_MODULE_81__.logicalNotConfig,\n    _kernels_LogicalOr__WEBPACK_IMPORTED_MODULE_82__.logicalOrConfig,\n    _kernels_Max__WEBPACK_IMPORTED_MODULE_83__.maxConfig,\n    _kernels_MaxPool3D__WEBPACK_IMPORTED_MODULE_84__.maxPool3DConfig,\n    _kernels_MaxPool__WEBPACK_IMPORTED_MODULE_85__.maxPoolConfig,\n    _kernels_MaxPool3DGrad__WEBPACK_IMPORTED_MODULE_86__.maxPoolGrad3DConfig,\n    _kernels_MaxPoolGrad__WEBPACK_IMPORTED_MODULE_87__.maxPoolGradConfig,\n    _kernels_MaxPoolWithArgmax__WEBPACK_IMPORTED_MODULE_88__.maxPoolWithArgmaxConfig,\n    _kernels_Maximum__WEBPACK_IMPORTED_MODULE_89__.maximumConfig,\n    _kernels_Mean__WEBPACK_IMPORTED_MODULE_90__.meanConfig,\n    _kernels_Min__WEBPACK_IMPORTED_MODULE_91__.minConfig,\n    _kernels_Minimum__WEBPACK_IMPORTED_MODULE_92__.minimumConfig,\n    _kernels_MirrorPad__WEBPACK_IMPORTED_MODULE_93__.mirrorPadConfig,\n    _kernels_Mod__WEBPACK_IMPORTED_MODULE_94__.modConfig,\n    _kernels_Multinomial__WEBPACK_IMPORTED_MODULE_95__.multinomialConfig,\n    _kernels_Multiply__WEBPACK_IMPORTED_MODULE_96__.multiplyConfig,\n    _kernels_Neg__WEBPACK_IMPORTED_MODULE_97__.negConfig,\n    _kernels_NonMaxSuppressionV3__WEBPACK_IMPORTED_MODULE_98__.nonMaxSuppressionV3Config,\n    _kernels_NonMaxSuppressionV4__WEBPACK_IMPORTED_MODULE_99__.nonMaxSuppressionV4Config,\n    _kernels_NonMaxSuppressionV5__WEBPACK_IMPORTED_MODULE_100__.nonMaxSuppressionV5Config,\n    _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_101__.notEqualConfig,\n    _kernels_OneHot__WEBPACK_IMPORTED_MODULE_102__.oneHotConfig,\n    _kernels_OnesLike__WEBPACK_IMPORTED_MODULE_103__.onesLikeConfig,\n    _kernels_Pack__WEBPACK_IMPORTED_MODULE_104__.packConfig,\n    _kernels_PadV2__WEBPACK_IMPORTED_MODULE_105__.padV2Config,\n    _kernels_Pow__WEBPACK_IMPORTED_MODULE_106__.powConfig,\n    _kernels_Prelu__WEBPACK_IMPORTED_MODULE_107__.preluConfig,\n    _kernels_Prod__WEBPACK_IMPORTED_MODULE_108__.prodConfig,\n    _kernels_Range__WEBPACK_IMPORTED_MODULE_109__.rangeConfig,\n    _kernels_Real__WEBPACK_IMPORTED_MODULE_110__.realConfig,\n    _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_111__.realDivConfig,\n    _kernels_Reciprocal__WEBPACK_IMPORTED_MODULE_112__.reciprocalConfig,\n    _kernels_Relu6__WEBPACK_IMPORTED_MODULE_113__.relu6Config,\n    _kernels_Relu__WEBPACK_IMPORTED_MODULE_114__.reluConfig,\n    _kernels_Reshape__WEBPACK_IMPORTED_MODULE_115__.reshapeConfig,\n    _kernels_ResizeBilinear__WEBPACK_IMPORTED_MODULE_116__.resizeBilinearConfig,\n    _kernels_ResizeBilinearGrad__WEBPACK_IMPORTED_MODULE_117__.resizeBilinearGradConfig,\n    _kernels_ResizeNearestNeighbor__WEBPACK_IMPORTED_MODULE_118__.resizeNearestNeighborConfig,\n    _kernels_ResizeNearestNeighborGrad__WEBPACK_IMPORTED_MODULE_119__.resizeNearestNeighborGradConfig,\n    _kernels_Reverse__WEBPACK_IMPORTED_MODULE_120__.reverseConfig,\n    _kernels_RotateWithOffset__WEBPACK_IMPORTED_MODULE_121__.rotateWithOffsetConfig,\n    _kernels_Round__WEBPACK_IMPORTED_MODULE_122__.roundConfig,\n    _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_123__.rsqrtConfig,\n    _kernels_ScatterNd__WEBPACK_IMPORTED_MODULE_124__.scatterNdConfig,\n    _kernels_Select__WEBPACK_IMPORTED_MODULE_125__.selectConfig,\n    _kernels_Selu__WEBPACK_IMPORTED_MODULE_126__.seluConfig,\n    _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_127__.sigmoidConfig,\n    _kernels_Sign__WEBPACK_IMPORTED_MODULE_128__.signConfig,\n    _kernels_Sin__WEBPACK_IMPORTED_MODULE_129__.sinConfig,\n    _kernels_Sinh__WEBPACK_IMPORTED_MODULE_130__.sinhConfig,\n    _kernels_Slice__WEBPACK_IMPORTED_MODULE_131__.sliceConfig,\n    _kernels_Softmax__WEBPACK_IMPORTED_MODULE_132__.softmaxConfig,\n    _kernels_Softplus__WEBPACK_IMPORTED_MODULE_133__.softplusConfig,\n    _kernels_SpaceToBatchND__WEBPACK_IMPORTED_MODULE_134__.spaceToBatchNDConfig,\n    _kernels_SparseToDense__WEBPACK_IMPORTED_MODULE_135__.sparseToDenseConfig,\n    _kernels_SplitV__WEBPACK_IMPORTED_MODULE_136__.splitVConfig,\n    _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_137__.sqrtConfig,\n    _kernels_Square__WEBPACK_IMPORTED_MODULE_138__.squareConfig,\n    _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_139__.squaredDifferenceConfig,\n    _kernels_Step__WEBPACK_IMPORTED_MODULE_140__.stepConfig,\n    _kernels_StridedSlice__WEBPACK_IMPORTED_MODULE_141__.stridedSliceConfig,\n    _kernels_Sub__WEBPACK_IMPORTED_MODULE_142__.subConfig,\n    _kernels_Sum__WEBPACK_IMPORTED_MODULE_143__.sumConfig,\n    _kernels_Tan__WEBPACK_IMPORTED_MODULE_144__.tanConfig,\n    _kernels_Tanh__WEBPACK_IMPORTED_MODULE_145__.tanhConfig,\n    _kernels_Tile__WEBPACK_IMPORTED_MODULE_146__.tileConfig,\n    _kernels_TopK__WEBPACK_IMPORTED_MODULE_147__.topKConfig,\n    _kernels_Transpose__WEBPACK_IMPORTED_MODULE_148__.transposeConfig,\n    _kernels_Unique__WEBPACK_IMPORTED_MODULE_149__.uniqueConfig,\n    _kernels_Unpack__WEBPACK_IMPORTED_MODULE_150__.unpackConfig,\n    _kernels_UnsortedSegmentSum__WEBPACK_IMPORTED_MODULE_151__.unsortedSegmentSumConfig,\n    _kernels_ZerosLike__WEBPACK_IMPORTED_MODULE_152__.zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerKernel)(kernelConfig);\n}\n//# sourceMappingURL=register_all_kernels.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ReshapePackedProgram\": () => /* binding */ ReshapePackedProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass ReshapePackedProgram {\n    constructor(outputShape, inputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        let mainLoop = ``;\n        for (let i = 0; i < 4; i++) {\n            let thisRC = `thisRC = rc;`;\n            if (i % 2 === 1) {\n                thisRC += `thisRC.z += 1;`;\n            }\n            if (i > 1) {\n                thisRC += `thisRC.y += 1;`;\n            }\n            mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n        }\n        this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_0__.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\nfunction getReshapedInputCoords(shape) {\n    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_0__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n//# sourceMappingURL=reshape_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeBilinearBackpropProgram\": () => /* binding */ ResizeBilinearBackpropProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ResizeBilinearBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_backprop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeBilinearProgram\": () => /* binding */ ResizeBilinearProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ResizeBilinearProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    ` - vec2(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeBilinearPackedProgram\": () => /* binding */ ResizeBilinearPackedProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ResizeBilinearPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeNearestNeigborBackpropProgram\": () => /* binding */ ResizeNearestNeigborBackpropProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ResizeNearestNeigborBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_backprop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeNearestNeighborProgram\": () => /* binding */ ResizeNearestNeighborProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass ResizeNearestNeighborProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    `, vec2(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ReverseProgram\": () => /* binding */ ReverseProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass ReverseProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n            return;\n        }\n        const getInCoord = (i) => {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - coords[${i}] - 1`;\n            }\n            return `coords[${i}]`;\n        };\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n        const type = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);\n        this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reverse_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ReversePackedProgram\": () => /* binding */ ReversePackedProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass ReversePackedProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_0__.getChannels)('rc', rank);\n        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n        const type = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);\n        if (rank === 1) {\n            this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n        }\n        else {\n            this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n        }\n        function getR(channels) {\n            return getChannel(channels);\n        }\n        function getG(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getB(channels) {\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getA(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getChannel(channels) {\n            const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n            const inCoords = inCoordsArray.join(',');\n            const innerDims = inCoordsArray.slice(-2).join(',');\n            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n        }\n        function getInCoord(i, channels1) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - ${channels1[i]} - 1`;\n            }\n            else {\n                return `${channels1[i]}`;\n            }\n        }\n    }\n}\n//# sourceMappingURL=reverse_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RotateProgram\": () => /* binding */ RotateProgram\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass RotateProgram {\n    constructor(imageShape, radians, fillValue, center) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        const sinFactor = Math.sin(radians).toFixed(3);\n        const cosFactor = Math.cos(radians).toFixed(3);\n        this.outputShape = imageShape;\n        const [centerX, centerY] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const centerXString = centerX.toFixed(3);\n        const centerYString = centerY.toFixed(3);\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=rotate_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ScatterProgram\": () => /* binding */ ScatterProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(strides.length);\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=scatter_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SegmentOpProgram\": () => /* binding */ SegmentOpProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass SegmentOpProgram {\n    constructor(segOpInfo, segOpType) {\n        this.variableNames = ['x', 'segmentIds'];\n        const windowSize = segOpInfo.windowSize;\n        const batchSize = segOpInfo.batchSize;\n        const inSize = segOpInfo.inSize;\n        const numSegments = segOpInfo.numSegments;\n        const outSize = numSegments * Math.ceil(inSize / windowSize);\n        this.outputShape = [batchSize, outSize];\n        const initializationValue = '0.0';\n        const returnValue = `sumValue`;\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n        let checkValueOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        let checkSegmentIdOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=segment_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SelectProgram\": () => /* binding */ SelectProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=select_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeShader\": () => /* binding */ makeShader,\n/* harmony export */   \"getCoordsDataType\": () => /* binding */ getCoordsDataType\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\");\n/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst { getBroadcastDims } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util;\n\n\nfunction makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n    });\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet =\n            getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet =\n            getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (usesPackedTextures) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo);\n        case 2:\n            return getPackedSampler2D(inInfo);\n        case 3:\n            return getPackedSampler3D(inInfo);\n        default:\n            return getPackedSamplerND(inInfo);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n    if (texShape != null && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nfunction getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n//# sourceMappingURL=shader_compiler.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLogicalCoordinatesFromFlatIndex\": () => /* binding */ getLogicalCoordinatesFromFlatIndex,\n/* harmony export */   \"dotify\": () => /* binding */ dotify,\n/* harmony export */   \"getFlatIndexFrom3D\": () => /* binding */ getFlatIndexFrom3D,\n/* harmony export */   \"ENCODE_FLOAT_SNIPPET\": () => /* binding */ ENCODE_FLOAT_SNIPPET\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nfunction getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {\n    const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape);\n    return strides\n        .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nfunction buildVec(x) {\n    if (x.length === 1) {\n        return `${x[0]}`;\n    }\n    return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nfunction dotify(x, y) {\n    if (x.length !== y.length) {\n        throw new Error(`Vectors to be dotted must be of the same length -` +\n            `got ${x.length} and ${y.length}`);\n    }\n    const slices = [];\n    const nearestVec4 = Math.floor(x.length / 4);\n    const nearestVec4Remainder = x.length % 4;\n    for (let i = 0; i < nearestVec4; i++) {\n        const xSlice = x.slice(i * 4, i * 4 + 4);\n        const ySlice = y.slice(i * 4, i * 4 + 4);\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    if (nearestVec4Remainder !== 0) {\n        let xSlice = x.slice(nearestVec4 * 4);\n        let ySlice = y.slice(nearestVec4 * 4);\n        if (xSlice.length === 1) {\n            xSlice = xSlice.map(d => `float(${d})`);\n            ySlice = ySlice.map(d => `float(${d})`);\n        }\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nfunction getFlatIndexFrom3D(shape) {\n    const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape).map(d => d.toString());\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nconst ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n//# sourceMappingURL=shader_compiler_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SliceProgram\": () => /* binding */ SliceProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);\n        const uniformPart = `uniform int start[${this.rank}];`;\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=slice_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SlicePackedProgram\": () => /* binding */ SlicePackedProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass SlicePackedProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);\n        const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('coords', this.rank);\n        const sourceLoc = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('sourceLoc', this.rank);\n        const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n        const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n        const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n        const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n        const sourceLocSetup = this.rank <= 4 ?\n            `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n            destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n                .join('\\n');\n        this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\n//# sourceMappingURL=slice_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StridedSliceProgram\": () => /* binding */ StridedSliceProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(size.length);\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=strided_slice_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PackingScheme\": () => /* binding */ PackingScheme,\n/* harmony export */   \"TextureUsage\": () => /* binding */ TextureUsage,\n/* harmony export */   \"PhysicalTextureType\": () => /* binding */ PhysicalTextureType,\n/* harmony export */   \"getUnpackedMatrixTextureShapeWidthHeight\": () => /* binding */ getUnpackedMatrixTextureShapeWidthHeight,\n/* harmony export */   \"getUnpackedArraySizeFromMatrixSize\": () => /* binding */ getUnpackedArraySizeFromMatrixSize,\n/* harmony export */   \"getColorMatrixTextureShapeWidthHeight\": () => /* binding */ getColorMatrixTextureShapeWidthHeight,\n/* harmony export */   \"getDenseTexShape\": () => /* binding */ getDenseTexShape,\n/* harmony export */   \"getMatrixSizeFromUnpackedArraySize\": () => /* binding */ getMatrixSizeFromUnpackedArraySize,\n/* harmony export */   \"decodeMatrixFromUnpackedColorRGBAArray\": () => /* binding */ decodeMatrixFromUnpackedColorRGBAArray,\n/* harmony export */   \"getPackedMatrixTextureShapeWidthHeight\": () => /* binding */ getPackedMatrixTextureShapeWidthHeight,\n/* harmony export */   \"getPackedRGBAArraySizeFromMatrixShape\": () => /* binding */ getPackedRGBAArraySizeFromMatrixShape,\n/* harmony export */   \"getTextureConfig\": () => /* binding */ getTextureConfig\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nvar TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nvar PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nfunction getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nfunction getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nfunction getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nfunction getDenseTexShape(shape) {\n    const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeToSquarishShape(texelsNeeded);\n}\nfunction getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nfunction decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nfunction getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nfunction getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nfunction getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n    }\n    downloadTextureFormat = gl.RGBA;\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n//# sourceMappingURL=tex_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextureManager\": () => /* binding */ TextureManager,\n/* harmony export */   \"computeBytes\": () => /* binding */ computeBytes\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _gpgpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gpgpu_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nclass TextureManager {\n    constructor(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0; // How many bytes that have been allocated\n        // are available for reuse.\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.usedTextures = {};\n    }\n    acquireTexture(shapeRC, usage, isPacked) {\n        const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n        const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextures)) {\n            this.usedTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this._numBytesFree -= texBytes;\n            this.log();\n            const newTexture = this.freeTextures[shapeKey].shift();\n            this.usedTextures[shapeKey].push(newTexture);\n            return newTexture;\n        }\n        let newTexture;\n        if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32) {\n            newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT32) {\n            newTexture =\n                this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n            newTexture =\n                this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        this.usedTextures[shapeKey].push(newTexture);\n        this.numUsedTextures++;\n        this._numBytesAllocated += texBytes;\n        this.log();\n        return newTexture;\n    }\n    releaseTexture(texture, shape, logicalTexType, isPacked) {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n        const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        const deleteTexThreshold = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n        if (deleteTexThreshold !== -1 &&\n            this._numBytesAllocated > deleteTexThreshold) {\n            this.gpgpu.deleteMatrixTexture(texture);\n            this._numBytesAllocated -= texBytes;\n        }\n        else {\n            this.freeTextures[shapeKey].push(texture);\n            this.numFreeTextures++;\n            this._numBytesFree += texBytes;\n        }\n        this.numUsedTextures--;\n        const texList = this.usedTextures[shapeKey];\n        const texIndex = texList.indexOf(texture);\n        if (texIndex < 0) {\n            throw new Error('Cannot release a texture that was never provided by this ' +\n                'texture manager');\n        }\n        texList.splice(texIndex, 1);\n        this.log();\n    }\n    log() {\n        if (!this.logEnabled) {\n            return;\n        }\n        const total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n        const freeRatio = this._numBytesFree / this._numBytesAllocated;\n        console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n        console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n    }\n    get numBytesAllocated() {\n        return this._numBytesAllocated;\n    }\n    get numBytesFree() {\n        return this._numBytesFree;\n    }\n    getNumUsedTextures() {\n        return this.numUsedTextures;\n    }\n    getNumFreeTextures() {\n        return this.numFreeTextures;\n    }\n    dispose() {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        for (const texShape in this.freeTextures) {\n            this.freeTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        for (const texShape in this.usedTextures) {\n            this.usedTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        this.freeTextures = null;\n        this.usedTextures = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0;\n    }\n}\nfunction numBytesForInternalFormat(gl, internalFormat) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    if (internalFormat === glany.R32F) {\n        return 4;\n    }\n    else if (internalFormat === glany.R16F) {\n        return 2;\n    }\n    else if (internalFormat === glany.RGBA32F) {\n        return 16;\n    }\n    else if (internalFormat === gl.RGBA) {\n        return 16;\n    }\n    else if (internalFormat === glany.RGBA16F) {\n        return 8;\n    }\n    throw new Error(`Unknown internal format ${internalFormat}`);\n}\nfunction computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n    // It is not possible to infer packed status from the texture type because\n    // depending on the textureConfig, different  texture types may resolve to the\n    // same internal format (e.g. in WebGL1, the internal format for\n    // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n    // explicitly.\n    const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n    let numElements;\n    if (isPacked) {\n        const [packedWidth, packedHeight] = (0,_tex_util__WEBPACK_IMPORTED_MODULE_1__.getPackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);\n        numElements = packedWidth * packedHeight;\n    }\n    else {\n        const [width, height] = (0,_tex_util__WEBPACK_IMPORTED_MODULE_1__.getUnpackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);\n        numElements = width * height;\n    }\n    const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n    return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n    switch (physicalTexType) {\n        case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32:\n            return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForPackedMatrixTexture)(textureConfig);\n        case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT16:\n            return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForFloat16PackedMatrixTexture)(textureConfig);\n        case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT32:\n            return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForFloat32MatrixTexture)(textureConfig);\n        case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT16:\n            return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForFloat16MatrixTexture)(textureConfig);\n        case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n            return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForUnsignedBytesMatrixTexture)(textureConfig);\n        default:\n            throw new Error(`Unknown physical texture type ${physicalTexType}`);\n    }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n        if (isPacked) {\n            return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32;\n        }\n        return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT32;\n    }\n    if (isPacked) {\n        return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT16;\n    }\n    return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n    if (logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.UPLOAD) {\n        return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    else if (logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.RENDER || logicalTexType == null) {\n        return getPhysicalTextureForRendering(isPacked);\n    }\n    else if (logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.DOWNLOAD ||\n        logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.PIXELS) {\n        return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n    }\n    throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n    return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n//# sourceMappingURL=texture_manager.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TileProgram\": () => /* binding */ TileProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=tile_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TransposeProgram\": () => /* binding */ TransposeProgram\n/* harmony export */ });\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nclass TransposeProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);\n        const switched = getSwitchedCoords(newDim);\n        this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n    }\n}\nfunction getSwitchedCoords(newDim) {\n    const rank = newDim.length;\n    if (rank > 6) {\n        throw Error(`Transpose for rank ${rank} is not yet supported`);\n    }\n    const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n    const switchedCoords = new Array(rank);\n    for (let i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n//# sourceMappingURL=transpose_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TransposePackedProgram\": () => /* binding */ TransposePackedProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass TransposePackedProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        if (this.rank > 6) {\n            throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n        }\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);\n        const outputOrder = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getVecChannels)('rc', this.rank);\n        const switchedOrder = new Array(this.rank);\n        for (let i = 0; i < newDim.length; i++) {\n            switchedOrder[newDim[i]] = outputOrder[i];\n        }\n        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n        this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n    }\n}\n//# sourceMappingURL=transpose_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UnaryOpProgram\": () => /* binding */ UnaryOpProgram,\n/* harmony export */   \"CHECK_NAN_SNIPPET\": () => /* binding */ CHECK_NAN_SNIPPET,\n/* harmony export */   \"LINEAR\": () => /* binding */ LINEAR,\n/* harmony export */   \"ABS\": () => /* binding */ ABS,\n/* harmony export */   \"STEP\": () => /* binding */ STEP,\n/* harmony export */   \"ELU\": () => /* binding */ ELU,\n/* harmony export */   \"RELU\": () => /* binding */ RELU,\n/* harmony export */   \"RELU6\": () => /* binding */ RELU6,\n/* harmony export */   \"CLONE\": () => /* binding */ CLONE\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass UnaryOpProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nconst LINEAR = `return x;`;\nconst ABS = `return abs(x);`;\nfunction STEP(alpha = 0.0) {\n    return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nconst CLONE = 'return x;';\n//# sourceMappingURL=unaryop_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LINEAR\": () => /* binding */ LINEAR,\n/* harmony export */   \"ELU\": () => /* binding */ ELU,\n/* harmony export */   \"RELU\": () => /* binding */ RELU,\n/* harmony export */   \"RELU6\": () => /* binding */ RELU6,\n/* harmony export */   \"UnaryOpPackedProgram\": () => /* binding */ UnaryOpPackedProgram\n/* harmony export */ });\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst LINEAR = `return x;`;\nconst ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nconst RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nconst RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nclass UnaryOpPackedProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unaryop_packed_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UnpackProgram\": () => /* binding */ UnpackProgram\n/* harmony export */ });\n/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./packing_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\");\n/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\nclass UnpackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_0__.getChannels)('rc', rank);\n        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);\n        const sourceCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_0__.getSourceCoords)(rank, channels);\n        const innerDims = channels.slice(-2);\n        const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n        this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unpack_gpu.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"version\": () => /* binding */ version\n/* harmony export */ });\n/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '2.8.2';\n\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MathBackendWebGL\": () => /* reexport safe */ _backend_webgl__WEBPACK_IMPORTED_MODULE_1__.MathBackendWebGL,\n/* harmony export */   \"setWebGLContext\": () => /* reexport safe */ _canvas_util__WEBPACK_IMPORTED_MODULE_2__.setWebGLContext,\n/* harmony export */   \"GPGPUContext\": () => /* reexport safe */ _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext,\n/* harmony export */   \"gpgpu_util\": () => /* reexport module object */ _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__,\n/* harmony export */   \"webgl_util\": () => /* reexport module object */ _webgl_util__WEBPACK_IMPORTED_MODULE_5__,\n/* harmony export */   \"forceHalfFloat\": () => /* binding */ forceHalfFloat\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gpgpu_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js\");\n/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\");\n/* harmony import */ var _backend_webgl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend_webgl */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js\");\n/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js\");\n/* harmony import */ var _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gpgpu_context */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js\");\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\n\n\n\n// WebGL specific utils.\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nfunction forceHalfFloat() {\n    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n//# sourceMappingURL=webgl.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"callAndCheck\": () => /* binding */ callAndCheck,\n/* harmony export */   \"canBeRepresented\": () => /* binding */ canBeRepresented,\n/* harmony export */   \"getWebGLErrorMessage\": () => /* binding */ getWebGLErrorMessage,\n/* harmony export */   \"getExtensionOrThrow\": () => /* binding */ getExtensionOrThrow,\n/* harmony export */   \"createVertexShader\": () => /* binding */ createVertexShader,\n/* harmony export */   \"createFragmentShader\": () => /* binding */ createFragmentShader,\n/* harmony export */   \"createProgram\": () => /* binding */ createProgram,\n/* harmony export */   \"linkProgram\": () => /* binding */ linkProgram,\n/* harmony export */   \"validateProgram\": () => /* binding */ validateProgram,\n/* harmony export */   \"createStaticVertexBuffer\": () => /* binding */ createStaticVertexBuffer,\n/* harmony export */   \"createStaticIndexBuffer\": () => /* binding */ createStaticIndexBuffer,\n/* harmony export */   \"getNumChannels\": () => /* binding */ getNumChannels,\n/* harmony export */   \"createTexture\": () => /* binding */ createTexture,\n/* harmony export */   \"validateTextureSize\": () => /* binding */ validateTextureSize,\n/* harmony export */   \"createFramebuffer\": () => /* binding */ createFramebuffer,\n/* harmony export */   \"bindVertexBufferToProgramAttribute\": () => /* binding */ bindVertexBufferToProgramAttribute,\n/* harmony export */   \"bindTextureUnit\": () => /* binding */ bindTextureUnit,\n/* harmony export */   \"unbindTextureUnit\": () => /* binding */ unbindTextureUnit,\n/* harmony export */   \"getProgramUniformLocationOrThrow\": () => /* binding */ getProgramUniformLocationOrThrow,\n/* harmony export */   \"getProgramUniformLocation\": () => /* binding */ getProgramUniformLocation,\n/* harmony export */   \"bindTextureToProgramUniformSampler\": () => /* binding */ bindTextureToProgramUniformSampler,\n/* harmony export */   \"bindCanvasToFramebuffer\": () => /* binding */ bindCanvasToFramebuffer,\n/* harmony export */   \"bindColorTextureToFramebuffer\": () => /* binding */ bindColorTextureToFramebuffer,\n/* harmony export */   \"unbindColorTextureFromFramebuffer\": () => /* binding */ unbindColorTextureFromFramebuffer,\n/* harmony export */   \"validateFramebuffer\": () => /* binding */ validateFramebuffer,\n/* harmony export */   \"getFramebufferErrorMessage\": () => /* binding */ getFramebufferErrorMessage,\n/* harmony export */   \"getBatchDim\": () => /* binding */ getBatchDim,\n/* harmony export */   \"getRowsCols\": () => /* binding */ getRowsCols,\n/* harmony export */   \"getShapeAs3D\": () => /* binding */ getShapeAs3D,\n/* harmony export */   \"getTextureShapeFromLogicalShape\": () => /* binding */ getTextureShapeFromLogicalShape,\n/* harmony export */   \"isReshapeFree\": () => /* binding */ isReshapeFree,\n/* harmony export */   \"getWebGLMaxTextureSize\": () => /* binding */ getWebGLMaxTextureSize,\n/* harmony export */   \"resetMaxTextureSize\": () => /* binding */ resetMaxTextureSize,\n/* harmony export */   \"resetMaxTexturesInShader\": () => /* binding */ resetMaxTexturesInShader,\n/* harmony export */   \"getMaxTexturesInShader\": () => /* binding */ getMaxTexturesInShader,\n/* harmony export */   \"getWebGLDisjointQueryTimerVersion\": () => /* binding */ getWebGLDisjointQueryTimerVersion,\n/* harmony export */   \"hasExtension\": () => /* binding */ hasExtension,\n/* harmony export */   \"isWebGLVersionEnabled\": () => /* binding */ isWebGLVersionEnabled,\n/* harmony export */   \"isCapableOfRenderingToFloatTexture\": () => /* binding */ isCapableOfRenderingToFloatTexture,\n/* harmony export */   \"isDownloadFloatTextureEnabled\": () => /* binding */ isDownloadFloatTextureEnabled,\n/* harmony export */   \"isWebGLFenceEnabled\": () => /* binding */ isWebGLFenceEnabled,\n/* harmony export */   \"assertNotComplex\": () => /* binding */ assertNotComplex\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js\");\n/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\");\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n\n\nfunction callAndCheck(gl, func) {\n    const returnValue = func();\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('DEBUG')) {\n        checkWebGLError(gl);\n    }\n    return returnValue;\n}\nfunction checkWebGLError(gl) {\n    const error = gl.getError();\n    if (error !== gl.NO_ERROR) {\n        throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n    }\n}\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\nfunction canBeRepresented(num) {\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n        (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n        return true;\n    }\n    return false;\n}\nfunction getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return `Unknown error code ${status}`;\n    }\n}\nfunction getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nfunction createVertexShader(gl, vertexShaderSource) {\n    const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n    callAndCheck(gl, () => gl.compileShader(vertexShader));\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nfunction createFragmentShader(gl, fragmentShaderSource) {\n    const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n    callAndCheck(gl, () => gl.compileShader(fragmentShader));\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n        console.log(shaderSource);\n        return;\n    }\n    const lineNumber = +lineNumberRegexResult[1];\n    const shaderLines = shaderSource.split('\\n');\n    const pad = shaderLines.length.toString().length + 2;\n    const linesWithLineNumbers = shaderLines.map((line, lineNumber) => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.rightPad((lineNumber + 1).toString(), pad) + line);\n    let maxLineLength = 0;\n    for (let i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(`%c ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nfunction createProgram(gl) {\n    return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\nfunction linkProgram(gl, program) {\n    callAndCheck(gl, () => gl.linkProgram(program));\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nfunction validateProgram(gl, program) {\n    callAndCheck(gl, () => gl.validateProgram(program));\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nfunction createStaticVertexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nfunction createStaticIndexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nfunction getNumChannels() {\n    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nfunction createTexture(gl) {\n    return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\nfunction validateTextureSize(width, height) {\n    const maxTextureSize = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if ((width <= 0) || (height <= 0)) {\n        const requested = `[${width}x${height}]`;\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if ((width > maxTextureSize) || (height > maxTextureSize)) {\n        const requested = `[${width}x${height}]`;\n        const max = `[${maxTextureSize}x${maxTextureSize}]`;\n        throw new Error('Requested texture size ' + requested +\n            ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nfunction createFramebuffer(gl) {\n    return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\nfunction bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    const loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        // The GPU compiler decided to strip out this attribute because it's unused,\n        // thus no need to bind.\n        return false;\n    }\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n    callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n    return true;\n}\nfunction bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nfunction unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nfunction getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nfunction getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nfunction bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n    callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nfunction bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n    callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nfunction bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nfunction unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nfunction validateFramebuffer(gl) {\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nfunction getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return `unknown error ${status}`;\n    }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    const tOrNull = callAndCheck(gl, () => returnTOrNull());\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    const glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n        throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n    }\n}\nfunction getBatchDim(shape, dimsToSkip = 2) {\n    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nfunction getRowsCols(shape) {\n    if (shape.length === 0) {\n        throw Error('Cannot get rows and columns of an empty shape array.');\n    }\n    return [\n        shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n    ];\n}\nfunction getShapeAs3D(shape) {\n    let shapeAs3D = [1, 1, 1];\n    const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n    if (!isScalar) {\n        shapeAs3D =\n            [getBatchDim(shape), ...getRowsCols(shape)];\n    }\n    return shapeAs3D;\n}\nfunction getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n    let maxTexSize = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if (isPacked) {\n        maxTexSize = maxTexSize * 2;\n        // This logic ensures we accurately count the number of packed texels needed\n        // to accommodate the tensor. We can only pack values in the same texel if\n        // they are from adjacent pairs of rows/cols within the same batch. So if a\n        // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n        // fact that the texels containing the third row are half empty.\n        logShape = logShape.map((d, i) => i >= logShape.length - 2 ?\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n        // Packed texture height is at least 2 (the channel height of a single\n        // texel).\n        if (logShape.length === 1) {\n            logShape = [2, logShape[0]];\n        }\n    }\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n        const squeezeResult = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    let size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        return [1, size];\n    }\n    else if (logShape.length === 2 && logShape[0] <= maxTexSize &&\n        logShape[1] <= maxTexSize) {\n        return logShape;\n    }\n    else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n        logShape[2] <= maxTexSize) {\n        return [logShape[0] * logShape[1], logShape[2]];\n    }\n    else if (logShape.length === 3 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2]];\n    }\n    else if (logShape.length === 4 &&\n        logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n        logShape[3] <= maxTexSize) {\n        return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    }\n    else if (logShape.length === 4 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    }\n    else {\n        if (isPacked) {\n            // For packed textures size equals the number of channels required to\n            // accommodate the texture data. However in order to squarify such that\n            // inner dimensions stay even, we rewrite size to equal the number of\n            // texels. Then in the return statement we rehydrate the squarified\n            // dimensions to channel units.\n            const batchDim = getBatchDim(logShape);\n            let rows = 2, cols = 2;\n            if (logShape.length) {\n                [rows, cols] = getRowsCols(logShape);\n            }\n            size = batchDim * (rows / 2) * (cols / 2);\n            return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeToSquarishShape(size).map(d => d * 2);\n        }\n        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeToSquarishShape(size);\n    }\n}\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nfunction isReshapeFree(shape1, shape2) {\n    shape1 = shape1.slice(-2);\n    shape2 = shape2.slice(-2);\n    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape1, shape2)) {\n        return true;\n    }\n    if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.\n        return true;\n    }\n    if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n        shape2[1] === 0) {\n        return true;\n    }\n    if (shape1.length !== shape2.length) { // One of the shapes is a vector.\n        const shape1Cols = shape1.slice(-1)[0];\n        const shape2Cols = shape2.slice(-1)[0];\n        if (shape1Cols === shape2Cols) {\n            return true;\n        }\n        if (isEven(shape1Cols) && isEven(shape2Cols) &&\n            (shape1[0] === 1 || shape2[0] === 1)) {\n            return true;\n        }\n    }\n    return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE;\nlet MAX_TEXTURES_IN_SHADER;\nfunction getWebGLMaxTextureSize(webGLVersion) {\n    if (MAX_TEXTURE_SIZE == null) {\n        const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n        MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n    return MAX_TEXTURE_SIZE;\n}\nfunction resetMaxTextureSize() {\n    MAX_TEXTURE_SIZE = null;\n}\nfunction resetMaxTexturesInShader() {\n    MAX_TEXTURES_IN_SHADER = null;\n}\nfunction getMaxTexturesInShader(webGLVersion) {\n    if (MAX_TEXTURES_IN_SHADER == null) {\n        const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n        MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n    return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nfunction getWebGLDisjointQueryTimerVersion(webGLVersion) {\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    let queryTimerVersion;\n    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n        webGLVersion === 2) {\n        queryTimerVersion = 2;\n    }\n    else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n        queryTimerVersion = 1;\n    }\n    else {\n        queryTimerVersion = 0;\n    }\n    return queryTimerVersion;\n}\nfunction hasExtension(gl, extensionName) {\n    const ext = gl.getExtension(extensionName);\n    return ext != null;\n}\nfunction isWebGLVersionEnabled(webGLVersion) {\n    try {\n        const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n        if (gl != null) {\n            return true;\n        }\n    }\n    catch (e) {\n        console.log('Error when getting WebGL context: ', e);\n        return false;\n    }\n    return false;\n}\nfunction isCapableOfRenderingToFloatTexture(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n    }\n    else {\n        if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n            return false;\n        }\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nfunction isDownloadFloatTextureEnabled(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n        if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n            return false;\n        }\n    }\n    else {\n        if (hasExtension(gl, 'EXT_color_buffer_float')) {\n            return createFloatTextureAndBindToFramebuffer(gl);\n        }\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n            const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n        }\n        return false;\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n    const texConfig = (0,_tex_util__WEBPACK_IMPORTED_MODULE_2__.getTextureConfig)(gl);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    const texConfig = (0,_tex_util__WEBPACK_IMPORTED_MODULE_2__.getTextureConfig)(gl, textureHalfFloatExtension);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nfunction isWebGLFenceEnabled(webGLVersion) {\n    if (webGLVersion !== 2) {\n        return false;\n    }\n    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);\n    // tslint:disable-next-line:no-any\n    const isEnabled = gl.fenceSync != null;\n    return isEnabled;\n}\nfunction assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` +\n                'in the WebGL backend.');\n        }\n    });\n}\n//# sourceMappingURL=webgl_util.js.map\n\n//# sourceURL=webpack://amsl/./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js?");

/***/ })

}]);